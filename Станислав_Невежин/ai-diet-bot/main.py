#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª AI Diet Bot 3.0
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ HTTP API —Å–µ—Ä–≤–µ—Ä
"""

import asyncio
import logging
import sys
import os
import json
import aiohttp
import signal
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Tuple

from api_server import APIServer, start_api_server

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config
from database import db
from llm_integration import llm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
user_interview_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class Form(StatesGroup):
    main_menu = State()
    collecting_name = State()
    collecting_competition_date = State()
    collecting_gender = State()
    collecting_height = State()
    collecting_current_weight = State()
    collecting_target_weight = State()
    training_sessions = State()
    training_exercises = State()
    training_weight = State()
    training_reps = State()
    training_sets = State()
    activity_steps = State()
    activity_work_type = State()
    activity_extra = State()
    activity_hours = State()
    viewing_plan = State()
    viewing_saved_plans = State()
    finish_session = State()

# –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def execute_sql_file():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ psycopg2"""
    
    sql_file = 'ai_diet_physical_model_v1.7.sql'
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ SQL —Ñ–∞–π–ª–∞
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        logger.info(f"üìñ –ß—Ç–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞: {sql_file}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —É–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —É—á–∏—Ç—ã–≤–∞—é—â–µ–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å $$
        commands = []
        current_command = ""
        in_dollar_quote = False
        
        for line in sql_content.split('\n'):
            stripped_line = line.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å $$
            if '$$' in stripped_line:
                in_dollar_quote = not in_dollar_quote
            
            current_command += line + '\n'
            
            # –ï—Å–ª–∏ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ $$ –∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            if not in_dollar_quote and stripped_line.endswith(';'):
                commands.append(current_command.strip())
                current_command = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if current_command.strip():
            commands.append(current_command.strip())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for i, command in enumerate(commands):
            command = command.strip()
            if command:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
                logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {i+1}: {command.split()[0] if command.split() else 'unknown'}...")
                db.execute_query(command)
        
        logger.info("‚úÖ SQL —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return False

def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ SQL —Ñ–∞–π–ª–∞
    sql_file = 'ai_diet_physical_model_v1.7.sql'
    if not os.path.exists(sql_file):
        logger.error(f"‚ùå SQL —Ñ–∞–π–ª {sql_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    logger.info(f"‚úÖ SQL —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {sql_file}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.connect()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        if execute_sql_file():
            logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info("üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º:")
            logger.info("   UNIQUE (athlete_id, plan_date, plan_name, meal_type)")
            return True
        else:
            logger.error("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def check_database_tables():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = ['athletes', 'meal_plans', 'workouts', 'activities']
        
        for table in tables_to_check:
            check_query = f"""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = '{table}'
            );
            """
            result = db.execute_query(check_query)
            if not result or not result[0]['exists']:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
        
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False
        
    finally:
        db.close()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    buttons = [
        [InlineKeyboardButton(text="üéØ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="create_plan")],
        [InlineKeyboardButton(text="üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="saved_plans")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def view_plan_keyboard(plan_id: int, day_number: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º"""
    total_days = 7
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if day_number > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"day_{plan_id}_{day_number-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"–î–µ–Ω—å {day_number}", callback_data=f"day_{plan_id}_{day_number}"))
    
    if day_number < total_days:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"day_{plan_id}_{day_number+1}"))
    
    buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"save_plan_{plan_id}"),
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞", callback_data="finish_session")
    ]
    buttons.append(action_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def view_generated_plan_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ (—Ç–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏)"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞", callback_data="finish_session")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    existing_user = db.get_user(user.id)
    
    if existing_user:
        welcome_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º?"
        )
        await message.answer(welcome_text, reply_markup=main_menu_keyboard())
        await state.set_state(Form.main_menu)
    else:
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø - AI –¥–∏–µ—Ç–æ–ª–æ–≥ 3.0, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ "
            "–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º! ü•á\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ:"
        )
        await message.answer(welcome_text)
        await message.answer("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è)")
        await state.set_state(Form.collecting_name)

@dp.message(Form.collecting_name)
async def collect_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    name = message.text.strip()
    
    if not name or len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
        return
    
    await state.update_data(name=name)
    await message.answer("üìÖ –ö–æ–≥–¥–∞ —É —Ç–µ–±—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(Form.collecting_competition_date)

@dp.message(Form.collecting_competition_date)
async def collect_competition_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    user = message.from_user
    
    try:
        comp_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
        if not db.validate_competition_date(comp_date):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –î–æ –Ω–∞—á–∞–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏.\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
            )
            return
        
        await state.update_data(competition_date=comp_date)
        await message.answer("üë´ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):")
        await state.set_state(Form.collecting_gender)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")

@dp.message(Form.collecting_gender)
async def collect_gender_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    gender = message.text.upper()
    
    if gender in ['–ú', 'M', '–ú–£–ñ', '–ú–£–ñ–°–ö–û–ô']:
        await state.update_data(gender='M')
        await message.answer("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(Form.collecting_height)
    elif gender in ['–ñ', 'F', '–ñ–ï–ù', '–ñ–ï–ù–°–ö–ò–ô']:
        await state.update_data(gender='F')
        await message.answer("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(Form.collecting_height)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):")

@dp.message(Form.collecting_height)
async def collect_height_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        height = float(message.text.replace(',', '.'))
        if 100 <= height <= 250:
            await state.update_data(height=height)
            await message.answer("‚öñÔ∏è –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
            await state.set_state(Form.collecting_current_weight)
        else:
            await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–≤ —Å–º):")

@dp.message(Form.collecting_current_weight)
async def collect_current_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_weight = float(message.text.replace(',', '.'))
        if 30 <= current_weight <= 200:
            await state.update_data(current_weight=current_weight)
            await message.answer("üéØ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥)?")
            await state.set_state(Form.collecting_target_weight)
        else:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 –∫–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

@dp.message(Form.collecting_target_weight)
async def collect_target_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        target_weight = float(message.text.replace(',', '.'))
        user_data = await state.get_data()
        current_weight = user_data.get('current_weight')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –≤–µ—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
        if not db.validate_weight_difference(current_weight, target_weight):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É–Ω—ã–º –∏ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–æ–º –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5%.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:"
            )
            return
        
        await state.update_data(target_weight=target_weight)
        await finish_parameter_collection(message, state, message.from_user)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

async def finish_parameter_collection(message: types.Message, state: FSMContext, user: types.User) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_data['telegram_id'] = user.id
    user_data['name'] = name
    
    try:
        athlete_id = db.create_user(user_data)
        
        if athlete_id is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: athlete_id = None")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await state.clear()
    
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å athlete_id {athlete_id}")
        
        await message.answer(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üèãÔ∏è‚Äç‚ôÇÔ∏è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üí™", callback_data="start_interview")
            ]])
        )
        
        await state.set_state(Form.main_menu)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "start_interview")
async def start_interview_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await callback.message.edit_text("üí™ –û–ø–∏—à–∏ —Å–≤–æ–π —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É —Ç–µ–±—è –≤ –Ω–µ–¥–µ–ª—é (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.training_sessions)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.message(Form.training_sessions)
async def training_sessions_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14
        sessions = int(answer)
        if 1 <= sessions <= 14:
            await state.update_data(sessions_per_week=sessions)
            await message.answer("üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç—ã –¥–µ–ª–∞–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?")
            await state.set_state(Form.training_exercises)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 14 –≤ –Ω–µ–¥–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–∏—Å–ª–æ–º:")

@dp.message(Form.training_exercises)
async def training_exercises_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    await state.update_data(exercises=answer)
    await message.answer("‚öñÔ∏è –ö–∞–∫–æ–π –≤–µ—Å —Å–Ω–∞—Ä—è–¥–æ–≤ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å (–≤ –∫–≥)?")
    await state.set_state(Form.training_weight)

@dp.message(Form.training_weight)
async def training_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –≤–µ—Å–µ —Å–Ω–∞—Ä—è–¥–æ–≤"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
        weight = float(answer.replace(',', '.'))
        if weight > 0:
            await state.update_data(equipment_weight=weight)
            await message.answer("üîÑ –°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
            await state.set_state(Form.training_reps)
        else:
            await message.answer("‚ùå –í–µ—Å —Å–Ω–∞—Ä—è–¥–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

@dp.message(Form.training_reps)
async def training_reps_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        reps = int(answer)
        if reps > 0:
            await state.update_data(reps=reps)
            await message.answer("üîÑ –°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
            await state.set_state(Form.training_sets)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:")

@dp.message(Form.training_sets)
async def training_sets_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–¥—Ö–æ–¥–∞—Ö"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    user_data = await state.get_data()
    athlete_id = db.get_athlete_id_by_telegram(user.id)
    
    if athlete_id:
        workout_data = {
            'sessions_per_week': user_data.get('sessions_per_week', ''),
            'exercises': user_data.get('exercises', ''),
            'equipment_weight': user_data.get('equipment_weight', ''),
            'reps': user_data.get('reps', ''),
            'sets': answer
        }
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è athlete_id {athlete_id}: {workout_data}")
        try:
            workout_id = db.save_workout_info(athlete_id, workout_data)
            if workout_id:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å workout_id {workout_id}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (workout_id = None)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
    await message.answer("üö∂‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.activity_steps)

@dp.message(Form.activity_steps)
async def activity_steps_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —à–∞–≥–æ–≤"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        steps = int(answer)
        if steps >= 0:
            await state.update_data(steps_per_day=steps)
            await message.answer("üíº –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã (—Å–∏–¥—è—á–∞—è, –ø–æ–¥–≤–∏–∂–Ω–∞—è)?")
            await state.set_state(Form.activity_work_type)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:")

@dp.message(Form.activity_work_type)
async def activity_work_type_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —Ä–∞–±–æ—Ç—ã"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã
    await state.update_data(work_type=answer)
    await message.answer("üèä‚Äç‚ôÇÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–ª–∞–≤–∞–Ω–∏–µ, –±–µ–≥, –≤–µ–ª–æ—Å–∏–ø–µ–¥ (—É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)?")
    await state.set_state(Form.activity_extra)

@dp.message(Form.activity_extra)
async def activity_extra_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await state.update_data(extra_activity=answer)
    await message.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.activity_hours)

@dp.message(Form.activity_hours)
async def activity_hours_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ —á–∞—Å–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
        hours = float(answer.replace(',', '.'))
        if hours >= 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ v1.7
            user_data = await state.get_data()
            athlete_id = db.get_athlete_id_by_telegram(user.id)

            if athlete_id:
                activity_data = {
                    'steps_per_day': user_data.get('steps_per_day'),
                    'work_type': user_data.get('work_type'),
                    'additional_activity': user_data.get('extra_activity'),
                    'activity_hours': hours
                }
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è athlete_id {athlete_id}: {activity_data}")
                try:
                    activity_id = db.save_activity_info(athlete_id, activity_data)
                    if activity_id:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å activity_id {activity_id}")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (activity_id = None)")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                    import traceback
                    logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
            await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è üçΩÔ∏è")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                athlete_id = db.get_athlete_id_by_telegram(user.id)
                user_data = db.get_user(user.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                required_fields = ['gender', 'height', 'current_weight', 'target_weight', 'competition_date']
                missing_fields = [field for field in required_fields if not user_data.get(field)]
                
                if missing_fields:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                    await message.answer(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ LLM
                logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                meal_plan = await llm.generate_meal_plan(user_data)
                
                if not meal_plan:
                    logger.error("‚ùå LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")
                    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
                if 'error' in meal_plan:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {meal_plan.get('error')}")
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –æ—Ç LLM: {json.dumps(meal_plan, indent=2, default=str)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–Ω–µ
                if 'meals' not in meal_plan or not meal_plan['meals']:
                    logger.error("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏")
                    logger.error(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞: {list(meal_plan.keys())}")
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–ª–∞–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    fallback_plan = llm._create_fallback_plan(user_data)
                    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–ª–∞–Ω")
                    meal_plan = fallback_plan
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                # –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                from datetime import datetime, timedelta
                plan_date = datetime.now().date() + timedelta(days=1)
                plan_name = f"–ü–ª–∞–Ω –Ω–∞ {plan_date.strftime('%d.%m.%Y')}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                try:
                    logger.info(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è athlete_id {athlete_id}")
                    logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞: {json.dumps(meal_plan, indent=2, default=str)}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
                    meal_plan['plan_name'] = plan_name
                    plan_id = db.save_meal_plan(athlete_id, meal_plan)
                    
                    if plan_id is not None:
                        logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å plan_id {plan_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {plan_name}")
                        
                        # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await message.answer(
                            "üéâ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")],
                                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                            ])
                        )
                        await state.set_state(Form.viewing_plan)
                        logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {plan_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {plan_name})")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (plan_id = None)")
                        await message.answer(
                            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            reply_markup=main_menu_keyboard()
                        )
                        await state.set_state(Form.main_menu)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ –±–∞–∑—É: {type(e).__name__}: {e}")
                    import traceback
                    logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {type(e).__name__}: {e}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ DeepSeek –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu_keyboard()
                )
                await state.set_state(Form.main_menu)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —á–∏—Å–ª–æ–º:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "create_plan", Form.main_menu)
async def create_plan_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    await callback.message.edit_text(
        "üîç –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="start_interview")
        ]])
    )

@dp.callback_query(F.data == "saved_plans", Form.main_menu)
async def saved_plans_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    logger.info(f"üìã –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        plans = db.get_user_plans(user.id)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(plans)}")
        logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤: {plans}")
        
        if plans:
            buttons = []
            for plan in plans[:10]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–∞ –¥–µ–Ω—å
                plan_date = plan['plan_date'].strftime('%d.%m.%Y')
                plan_name = plan.get('plan_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                buttons.append([InlineKeyboardButton(
                    text=f"{plan_name} ({plan['total_calories']} –∫–∫–∞–ª)",
                    callback_data=f"view_saved_plan_{plan['plan_date']}_{plan_name}"
                )])
            buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            
            await callback.message.edit_text(
                "üìÖ –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await state.set_state(Form.viewing_saved_plans)
        else:
            logger.info("üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")
            await callback.message.edit_text(
                "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu_keyboard()
        )

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å: {e}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ back_to_menu: {e}")
            raise

@dp.callback_query(F.data.startswith("view_plan_"))
async def view_plan_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    plan_id = int(callback.data.split('_')[2])  # view_plan_{plan_id}
    user = callback.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        plan_info = db.execute_query(
            "SELECT plan_date, plan_name FROM meal_plans WHERE meal_id = %s LIMIT 1",
            (plan_id,)
        )
        
        if plan_info:
            plan_date = plan_info[0]['plan_date']
            plan_name = plan_info[0].get('plan_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            athlete_id = db.get_athlete_id_by_telegram(user.id)
            
            if athlete_id:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                meals = db.get_meals_for_plan(plan_date, athlete_id, plan_name)
                
                if not meals:
                    await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                plan_text = f"üìã {plan_name}"
                plan_text += ":\n\n"
                
                total_calories = 0
                total_proteins = 0
                total_fats = 0
                total_carbs = 0
                
                for meal in meals:
                    plan_text += f"üçΩ {meal['meal_type'].capitalize()}: {meal['description']}\n"
                    plan_text += f"   üìä {meal['calories']} –∫–∫–∞–ª (–ë:{meal['proteins']}–≥, –ñ:{meal['fats']}–≥, –£:{meal['carbs']}–≥)\n\n"
                    
                    total_calories += meal['calories']
                    total_proteins += meal['proteins']
                    total_fats += meal['fats']
                    total_carbs += meal['carbs']
                
                plan_text += f"üìà –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª "
                plan_text += f"(–ë:{total_proteins:.1f}–≥, –ñ:{total_fats:.1f}–≥, –£:{total_carbs:.1f}–≥)"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–∑ 2 –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
                await callback.message.answer(plan_text, reply_markup=view_generated_plan_keyboard())
                await state.set_state(Form.viewing_plan)
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await callback.message.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback view_plan: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞")

@dp.callback_query(F.data.startswith("view_saved_plan_"))
async def handle_view_saved_plan(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    # view_saved_plan_YYYY-MM-DD_plan_name
    parts = callback.data.split('_')
    plan_date_str = parts[3]
    plan_name = '_'.join(parts[4:]) if len(parts) > 4 else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    
    user = callback.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
        plan_date = datetime.strptime(plan_date_str, '%Y-%m-%d').date()
        logger.info(f"üìÖ –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞ –Ω–∞ –¥–∞—Ç—É: {plan_date}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {plan_name}")
        
        athlete_id = db.get_athlete_id_by_telegram(user.id)
        logger.info(f"üë§ Athlete ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {athlete_id}")
        
        if athlete_id:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
            meals = db.get_meals_for_plan(plan_date, athlete_id, plan_name)
            logger.info(f"üçΩ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meals)}")
            logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meals}")
            
            if not meals:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞—Ç—ã {plan_date}, –Ω–∞–∑–≤–∞–Ω–∏—è {plan_name}")
                await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
            plan_text = f"üìã {plan_name}"
            plan_text += ":\n\n"
            
            total_calories = 0
            total_proteins = 0
            total_fats = 0
            total_carbs = 0
            
            for meal in meals:
                plan_text += f"üçΩ {meal['meal_type'].capitalize()}: {meal['description']}\n"
                plan_text += f"   üìä {meal['calories']} –∫–∫–∞–ª (–ë:{meal['proteins']}–≥, –ñ:{meal['fats']}–≥, –£:{meal['carbs']}–≥)\n\n"
                
                total_calories += meal['calories']
                total_proteins += meal['proteins']
                total_fats += meal['fats']
                total_carbs += meal['carbs']
            
            plan_text += f"üìà –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª "
            plan_text += f"(–ë:{total_proteins:.1f}–≥, –ñ:{total_fats:.1f}–≥, –£:{total_carbs:.1f}–≥)"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ 2 –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
            await callback.message.answer(plan_text, reply_markup=view_generated_plan_keyboard())
            await state.set_state(Form.viewing_plan)
            logger.info(f"‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        else:
            logger.error(f"‚ùå Athlete ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–ª–∞–Ω–∞: {plan_date_str}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–ª–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@dp.callback_query(F.data == "finish_session")
async def finish_session_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    logger.info(f"üèÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await state.clear()
    user_interview_data.pop(user.id, None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    await callback.message.edit_text(
        "üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞—á–∏ –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö! üèÜ\n\n"
        "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –Ω–∞–ø–∏—à–∏ /start",
        reply_markup=None
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Diet Bot 3.0 —Å HTTP API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not check_database_tables():
        logger.info("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        if not initialize_database():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    api_task = asyncio.create_task(start_api_server())
    logger.info("üåê HTTP API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...")
    max_retries = 5
    for attempt in range(max_retries):
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            break
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
            else:
                logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–µ–±—Ö—É–∫ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω: {webhook_info.url}")
            logger.warning("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –µ—â–µ —Ä–∞–∑...")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("‚úÖ –í–µ–±—Ö—É–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            logger.info("‚úÖ –í–µ–±—Ö—É–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å polling")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        logger.info("ü§ñ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å–∏–≥–Ω–∞–ª—É")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º API –∑–∞–¥–∞—á—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        api_task.cancel()
        try:
            await api_task
        except asyncio.CancelledError:
            logger.info("üåê HTTP API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()

async def run_main():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
    main_task = asyncio.create_task(main())
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_running_loop()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SIGTERM
    def handle_sigterm():
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω SIGTERM —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        main_task.cancel()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SIGINT (Ctrl+C)
    def handle_sigint():
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω SIGINT —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        main_task.cancel()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    try:
        loop.add_signal_handler(signal.SIGTERM, handle_sigterm)
        loop.add_signal_handler(signal.Signal.SIGTERM, handle_sigterm)  # –î–ª—è Windows
    except (AttributeError, NotImplementedError):
        logger.warning("‚ö†Ô∏è SIGTERM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    
    try:
        loop.add_signal_handler(signal.SIGINT, handle_sigint)
        loop.add_signal_handler(signal.Signal.SIGINT, handle_sigint)  # –î–ª—è Windows
    except (AttributeError, NotImplementedError):
        logger.warning("‚ö†Ô∏è SIGINT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ")
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    try:
        await main_task
    except asyncio.CancelledError:
        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def open_yaml_file():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–∞–π–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    yaml_file = 'ai_diet_api.yaml'
    try:
        if os.path.exists(yaml_file):
            with open(yaml_file, 'r', encoding='utf-8') as f:
                content = f.read()
                logger.info(f"‚úÖ YAML —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {yaml_file}")
                logger.info(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                has_info = "info:" in content
                has_paths = "paths:" in content
                has_components = "components:" in content
                
                logger.info(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ YAML: info={has_info}, paths={has_paths}, components={has_components}")
                
                if has_info and has_paths:
                    logger.info("üéØ YAML —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è YAML —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º")
                    return False
        else:
            logger.error(f"‚ùå YAML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {yaml_file}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è YAML —Ñ–∞–π–ª–∞: {e}")
        return False

async def test_all_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API...")
    
    # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç aiohttp –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    try:
        import aiohttp
        logger.info(f"‚úÖ –ú–æ–¥—É–ª—å aiohttp —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤–µ—Ä—Å–∏—è: {aiohttp.__version__}")
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ aiohttp: {e}")
        logger.error("üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ aiohttp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install aiohttp")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
        import sys
        logger.info(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: {sorted(sys.modules.keys())}")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π telegram_id –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    test_telegram_id = 999888777
    
    endpoints = [
        ("GET", "/health"),
        ("GET", "/api/swagger/"),
        ("GET", "/api/swagger.yaml"),
        ("POST", "/api/users"),
        ("GET", f"/api/users/{test_telegram_id}"),
        ("POST", "/api/meal-plans"),
        ("GET", f"/api/meal-plans?telegram_id={test_telegram_id}")
    ]
    
    results = []
    base_url = config.API_BASE_URL
    logger.info(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ –±–∞–∑–æ–≤–æ–º URL: {base_url}")
    logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API_BASE_URL: {config.API_BASE_URL}")
    logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HOST: {config.HOST}")
    logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PORT: {config.PORT}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ base_url —Å –æ–∂–∏–¥–∞–µ–º—ã–º URL Amvera
    expected_amvera_url = "https://ai-diet-bot-snevezhin.amvera.io"
    if base_url != expected_amvera_url:
        logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: base_url ({base_url}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º Amvera URL ({expected_amvera_url})")
        logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä!")
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_BASE_URL")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ athlete_id
    created_athlete_id = None
    # –î–∞—Ç–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: —Å–µ–≥–æ–¥–Ω—è + 1 –¥–µ–Ω—å
    from datetime import datetime, timedelta
    plan_date = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    
    for method, endpoint in endpoints:
        try:
            full_url = f"{base_url}{endpoint}"
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {method} {full_url}")
            
            async with aiohttp.ClientSession() as session:
                if method == "GET":
                    async with session.get(full_url) as response:
                        status = response.status
                        response_text = await response.text()
                        logger.info(f"{method} {endpoint}: {status} - Response: {response_text[:200]}")
                        results.append((method, endpoint, status, status < 500))
                elif method == "POST" and endpoint == "/api/users":
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π athlete_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    db.connect()
                    next_athlete_id = db.get_next_athlete_id()
                    db.close()
                    
                    user_data = {
                        "telegram_id": test_telegram_id,
                        "name": "–¢–µ—Å—Ç –≠–Ω–¥–ø–æ–∏–Ω—Ç",
                        "gender": "M",
                        "height": 175,
                        "current_weight": 70,
                        "target_weight": 68,
                        "competition_date": "2025-09-29"
                    }
                    async with session.post(
                        full_url,
                        json=user_data,
                        headers={'Content-Type': 'application/json'}
                    ) as response:
                        status = response.status
                        response_text = await response.text()
                        logger.info(f"{method} {endpoint}: {status} - Response: {response_text[:200]}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º athlete_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
                        if status == 201:
                            try:
                                response_data = await response.json()
                                created_athlete_id = response_data.get('athlete_id')
                                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å athlete_id: {created_athlete_id}")
                            except:
                                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å athlete_id –∏–∑ –æ—Ç–≤–µ—Ç–∞")
                        
                        results.append((method, endpoint, status, status in [201, 409]))
                elif method == "POST" and endpoint == "/api/meal-plans":
                    if created_athlete_id is None:
                        logger.warning("‚ö†Ô∏è athlete_id –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç POST /api/meal-plans")
                        results.append((method, endpoint, 0, False))
                        continue
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º athlete_id —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    async with session.post(
                        full_url,
                        json={
                            "telegram_id": test_telegram_id,
                            "athlete_id": created_athlete_id,
                            "plan_date": plan_date,
                            "plan_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ {plan_date}"
                        },
                        headers={'Content-Type': 'application/json'}
                    ) as response:
                        status = response.status
                        response_text = await response.text()
                        logger.info(f"{method} {endpoint}: {status} - Response: {response_text[:200]}")
                        results.append((method, endpoint, status, status < 500))
        except Exception as e:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {method} {endpoint}: {type(e).__name__}: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            results.append((method, endpoint, 0, False))
        
        await asyncio.sleep(0.5)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ù–î–ü–û–ò–ù–¢–û–í:")
    logger.info("=" * 50)
    
    successful_tests = sum(1 for _, _, _, success in results if success)
    total_tests = len(results)
    
    for method, endpoint, status, success in results:
        status_icon = "‚úÖ" if success else "‚ùå"
        logger.info(f"{status_icon} {method} {endpoint}: {status}")
    
    logger.info("=" * 50)
    logger.info(f"–ò—Ç–æ–≥–æ: {successful_tests}/{total_tests} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    return successful_tests == total_tests

async def run_with_features():
    """–ó–∞–ø—É—Å–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: YAML –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Diet Bot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º YAML —Ñ–∞–π–ª
    logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML —Ñ–∞–π–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    yaml_ok = open_yaml_file()
    
    if not yaml_ok:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å YAML —Ñ–∞–π–ª–æ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞
    main_task = asyncio.create_task(run_main())
    
    # 3. –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await asyncio.sleep(3)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    endpoints_ok = await test_all_endpoints()
    
    if endpoints_ok:
        logger.info("üéâ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    try:
        await main_task
    except asyncio.CancelledError:
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    import signal
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –Ω–∞ Amvera
        is_amvera = "amvera.io" in config.API_BASE_URL
        if is_amvera:
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ Amvera: {config.API_BASE_URL}")
            logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            logger.info("   - –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç AI Diet Bot")
            logger.info("   - HTTP API —Å–µ—Ä–≤–µ—Ä")
            logger.info("   - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            logger.info("   - OpenAPI YAML —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
            logger.info("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        asyncio.run(run_with_features())
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ –Ω–∞ Amvera, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        if is_amvera:
            logger.info("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ main.py
            test_result = asyncio.run(test_all_endpoints())
            if test_result:
                logger.info("üéâ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ Amvera!")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ Amvera")
        
    except KeyboardInterrupt:
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        sys.exit(1)