"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞ Amvera
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞ 3.0 —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ v1.4
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å Amvera PostgreSQL —á–µ—Ä–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
"""

import logging
import json
import psycopg2
import subprocess
import socket
import time
from psycopg2.extras import RealDictCursor
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, date, timedelta
from config import config

logger = logging.getLogger(__name__)

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    def __init__(self):
        self.connection = None
        self.cursor = None
    
    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL"""
        try:
            db_url = config.database_url
            logger.info(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å URL: {db_url}")
            self.connection = psycopg2.connect(
                db_url,
                cursor_factory=RealDictCursor,
                connect_timeout=10
            )
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Amvera PostgreSQL")
            
            self.cursor = self.connection.cursor()
            
        except psycopg2.OperationalError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (OperationalError): {e}")
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î Amvera: {e}") from e
        except psycopg2.ProgrammingError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (ProgrammingError): {e}")
            raise ConnectionError("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.") from e
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

    def check_database_availability(self, timeout: int = 5) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
            test_conn = psycopg2.connect(config.database_url, connect_timeout=timeout)
            test_conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Amvera –¥–æ—Å—Ç—É–ø–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Amvera –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return False

    def diagnose_connection_issues(self) -> Dict[str, Any]:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Amvera PostgreSQL"""
        diagnostics = {
            'database_available': False,
            'error_details': []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        diagnostics['database_available'] = self.check_database_availability()

        if not diagnostics['database_available']:
            diagnostics['error_details'].append('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Amvera –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:')
            diagnostics['error_details'].append('1. –ù–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ –ø–∞–Ω–µ–ª–∏ Amvera')
            diagnostics['error_details'].append('2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
            diagnostics['error_details'].append('3. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ PostgreSQL –≤ Amvera')
            diagnostics['error_details'].append('4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Amvera')

        return diagnostics

    def execute_query_with_retry(self, query: str, params: tuple = None, max_retries: int = 3,
                               retry_delay: int = 2) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        for attempt in range(max_retries):
            try:
                return self.execute_query(query, params)
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                if attempt == max_retries - 1:
                    raise
                
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                logger.info(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.close()
                self.connect()
        
        return []
    
    def ensure_connection(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            if self.connection is None or self.connection.closed:
                logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Amvera PostgreSQL —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                self.connect()
            elif self.cursor is None or self.cursor.closed:
                logger.warning("‚ö†Ô∏è –ö—É—Ä—Å–æ—Ä –ë–î –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
                self.cursor = self.connection.cursor()
            return True
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: {e}")
            return False
    
    def execute_query(self, query: str, params: tuple = None) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if not self.ensure_connection():
                logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Amvera PostgreSQL")
                return []
            
            logger.debug(f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL: {query}")
            logger.debug(f"üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            self.cursor.execute(query, params)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å SELECT –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç RETURNING
            query_upper = query.strip().upper()
            if query_upper.startswith('SELECT') or 'RETURNING' in query_upper:
                result = self.cursor.fetchall()
                logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {len(result)} –∑–∞–ø–∏—Å–µ–π")
                self.connection.commit()
                return result
            
            self.connection.commit()
            logger.debug("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
            return []
            
        except Exception as e:
            if self.connection:
                self.connection.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Amvera PostgreSQL: {type(e).__name__}: {e}")
            logger.error(f"üìã SQL: {query}")
            logger.error(f"üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è PostgreSQL –æ—à–∏–±–æ–∫ Amvera
            if hasattr(e, 'pgcode'):
                logger.error(f"üìü PostgreSQL –∫–æ–¥ –æ—à–∏–±–∫–∏: {e.pgcode}")
            if hasattr(e, 'pgerror'):
                logger.error(f"üìü PostgreSQL —Å–æ–æ–±—â–µ–Ω–∏–µ: {e.pgerror}")
                
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Amvera PostgreSQL –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            try:
                self.ensure_connection()
            except Exception as reconnect_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Amvera PostgreSQL: {reconnect_error}")
                
            raise
    
    def get_user(self, telegram_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        query = "SELECT * FROM athletes WHERE telegram_id = %s"
        result = self.execute_query(query, (telegram_id,))
        return result[0] if result else None
    
    def create_user(self, user_data: Dict) -> int:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ v1.7 —Å telegram_id"""
        query = """
        INSERT INTO athletes (
            telegram_id, name, gender, height, current_weight,
            target_weight, competition_date
        ) VALUES (%s, %s, %s, %s, %s, %s, %s)
        RETURNING athlete_id
        """
        params = (
            user_data['telegram_id'],
            user_data.get('name', ''),
            user_data.get('gender'),
            user_data.get('height'),
            user_data.get('current_weight'),
            user_data.get('target_weight'),
            user_data.get('competition_date')
        )
        try:
            result = self.execute_query(query, params)
            if result and len(result) > 0:
                athlete_id = result[0]['athlete_id']
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å athlete_id: {athlete_id}")
                return athlete_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª athlete_id")
                logger.error(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            logger.error(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return None
    
    def update_user(self, athlete_id: int, update_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        set_clause = ", ".join([f"{key} = %s" for key in update_data.keys()])
        values = list(update_data.values())
        values.append(athlete_id)
        
        query = f"UPDATE athletes SET {set_clause} WHERE athlete_id = %s"
        self.execute_query(query, values)
        return True
    
    def save_workout_info(self, athlete_id: int, workout_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
        query = """
        INSERT INTO workouts (
            athlete_id, sessions_per_week, exercises,
            equipment_weight, reps, sets
        ) VALUES (%s, %s, %s, %s, %s, %s)
        RETURNING workout_id
        """
        params = (
            athlete_id,
            workout_data.get('sessions_per_week'),
            workout_data.get('exercises'),
            workout_data.get('equipment_weight'),
            workout_data.get('reps'),
            workout_data.get('sets')
        )
        try:
            result = self.execute_query(query, params)
            if result and len(result) > 0:
                workout_id = result[0]['workout_id']
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å workout_id: {workout_id}")
                return workout_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª workout_id")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return None
    
    def save_activity_info(self, athlete_id: int, activity_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ v1.7"""
        query = """
        INSERT INTO activities (
            athlete_id, steps_per_day, work_type, additional_activity, activity_hours
        ) VALUES (%s, %s, %s, %s, %s)
        RETURNING activity_id
        """
        params = (
            athlete_id,
            activity_data.get('steps_per_day'),
            activity_data.get('work_type'),
            activity_data.get('additional_activity'),
            activity_data.get('activity_hours')
        )
        try:
            result = self.execute_query(query, params)
            if result and len(result) > 0:
                activity_id = result[0]['activity_id']
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å activity_id: {activity_id}")
                return activity_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª activity_id")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return None
    
    def save_meal_plan(self, athlete_id: int, plan_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ v1.7 (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)"""
        logger.info(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è athlete_id {athlete_id}")
        logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞: {json.dumps(plan_data, indent=2, default=str)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–ª–∞–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        plan_date = plan_data.get('plan_date')
        if isinstance(plan_date, str):
            from datetime import datetime
            plan_date = datetime.strptime(plan_date, '%Y-%m-%d').date()
        elif plan_date is None:
            from datetime import date, timedelta
            plan_date = date.today() + timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        plan_name = plan_data.get('plan_name', '–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω')
        
        meal_ids = []
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            delete_query = """
            DELETE FROM meal_plans
            WHERE athlete_id = %s AND plan_date = %s AND plan_name = %s
            """
            delete_params = (athlete_id, plan_date, plan_name)
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è athlete_id {athlete_id}, –¥–∞—Ç—ã {plan_date}, –Ω–∞–∑–≤–∞–Ω–∏—è '{plan_name}'")
            self.execute_query(delete_query, delete_params)
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω —É–¥–∞–ª–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
            meals = plan_data.get('meals', [])
            if not meals:
                logger.error("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–µ–º—ã –ø–∏—â–∏")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
            for i, meal in enumerate(meals):
                query = """
                INSERT INTO meal_plans (
                    athlete_id, meal_type, calories, proteins,
                    fats, carbs, description, plan_date, plan_name
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                RETURNING meal_id
                """
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
                meal_type = meal.get('meal_type', '')
                calories = meal.get('calories', 0) or 0
                proteins = meal.get('proteins', 0) or 0
                fats = meal.get('fats', 0) or 0
                carbs = meal.get('carbs', 0) or 0
                description = meal.get('description', '') or ''
                
                params = (
                    athlete_id,
                    meal_type,
                    calories,
                    proteins,
                    fats,
                    carbs,
                    description,
                    plan_date,
                    plan_name
                )
                
                logger.info(f"üçΩ [{i+1}/{len(meals)}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {meal_type}")
                logger.debug(f"üìÖ –î–∞—Ç–∞ –ø–ª–∞–Ω–∞: {plan_date}, –ù–∞–∑–≤–∞–Ω–∏–µ: {plan_name}")
                logger.debug(f"üî¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                
                result = self.execute_query(query, params)
                logger.debug(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç execute_query: {result}")
                
                if result and len(result) > 0:
                    meal_id = result[0]['meal_id']
                    meal_ids.append(meal_id)
                    logger.info(f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ {meal_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID {meal_id}")
                else:
                    logger.error(f"‚ùå –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª meal_id –¥–ª—è {meal_type}")
                    logger.error(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
                    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –≤–µ—Ä–Ω—É–ª ID, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏ {meal_type}")
            
            if meal_ids:
                logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è '{plan_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meal_ids)}, –ø–µ—Ä–≤—ã–π meal_id: {meal_ids[0]}")
                return meal_ids[0]
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            if self.connection:
                self.connection.rollback()
            return None

    def save_meals(self, plan_id: int, meals_data: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)"""
        # –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ save_meal_plan
        logger.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ save_meals —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ meal_plans")
        return True
    
    def get_user_plans(self, user_id: int, limit: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ v1.7 (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–æ–≤ –Ω–∞ –¥–µ–Ω—å)"""
        query = """
        SELECT
            mp.plan_date,
            mp.plan_name,
            SUM(mp.calories) as total_calories,
            SUM(mp.proteins) as total_proteins,
            SUM(mp.fats) as total_fats,
            SUM(mp.carbs) as total_carbs,
            MAX(mp.created_at) as created_at,
            COUNT(DISTINCT mp.meal_type) as meal_count
        FROM meal_plans mp
        JOIN athletes a ON mp.athlete_id = a.athlete_id
        WHERE a.telegram_id = %s
        GROUP BY mp.plan_date, mp.plan_name
        ORDER BY mp.plan_date DESC, mp.plan_name
        LIMIT %s
        """
        return self.execute_query(query, (user_id, limit))

    def get_plan_by_date(self, athlete_id: int, plan_date: date) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ v1.7"""
        query = """
        SELECT * FROM meal_plans
        WHERE athlete_id = %s AND plan_date = %s
        ORDER BY meal_type
        """
        return self.execute_query(query, (athlete_id, plan_date))

    def get_meals_for_plan(self, plan_date: date, athlete_id: int, plan_name: str = '–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω') -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∞ –Ω–∞ –¥–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        query = """
        SELECT * FROM meal_plans
        WHERE athlete_id = %s AND plan_date = %s AND plan_name = %s
        ORDER BY meal_type
        """
        return self.execute_query(query, (athlete_id, plan_date, plan_name))
    
    def validate_competition_date(self, competition_date: date) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π (‚â• 7 –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è)"""
        if competition_date <= date.today() + timedelta(days=6):
            return False
        return True
    
    def validate_weight_difference(self, current_weight: float, target_weight: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤–µ—Å–æ–≤ (‚â§ 5%)"""
        if current_weight <= 0 or target_weight <= 0:
            return False
        
        difference = abs(current_weight - target_weight) / current_weight
        return difference <= 0.05  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
    
    def get_athlete_id_by_telegram(self, telegram_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å athlete_id –ø–æ telegram_id"""
        query = "SELECT athlete_id FROM athletes WHERE telegram_id = %s"
        result = self.execute_query(query, (telegram_id,))
        if result and len(result) > 0:
            return result[0]['athlete_id']
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

    def get_next_athlete_id(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π athlete_id (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π + 1)"""
        query = "SELECT COALESCE(MAX(athlete_id), 0) + 1 as next_id FROM athletes"
        result = self.execute_query(query)
        if result and len(result) > 0:
            return result[0]['next_id']
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π athlete_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1")
            return 1

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()