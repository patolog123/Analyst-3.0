#!/usr/bin/env python3
"""
HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è AI Diet Bot 3.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è aiohttp —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º aiogram –±–æ—Ç–æ–º
"""

import asyncio
import logging
import json
import os
from datetime import datetime, date
from typing import Dict, Any, Optional
from decimal import Decimal

from aiohttp import web
import aiohttp_cors

from swagger_config import get_swagger_ui_template
from config import config

from database import db
from llm_integration import llm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class APIServer:
    """HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è AI Diet Bot"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.py
        self.host = config.HOST
        self.port = config.PORT
        self.api_base_url = config.API_BASE_URL
        self.app = web.Application()
        self.setup_routes()
        
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        existing_routes = [str(route) for route in self.app.router.routes()]
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        def safe_add_route(method, path, handler):
            route_str = f"{method} {path}"
            if route_str not in existing_routes:
                if method == 'GET':
                    self.app.router.add_get(path, handler)
                elif method == 'POST':
                    self.app.router.add_post(path, handler)
                # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
                logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–∞—Ä—à—Ä—É—Ç: {method} {path}")
            else:
                logger.warning(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {route_str}")
        
        # Health check - –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è CORS
        safe_add_route('GET', '/health', self.health_check)
        safe_add_route('OPTIONS', '/health', self.health_check_options)
        
        # Users endpoints
        safe_add_route('POST', '/api/users', self.create_user)
        safe_add_route('GET', '/api/users', self.get_users)
        safe_add_route('GET', '/api/users/{telegram_id}', self.get_user)
        
        # Meal plans endpoints
        safe_add_route('POST', '/api/meal-plans', self.generate_meal_plan)
        safe_add_route('GET', '/api/meal-plans', self.get_user_plans)
        safe_add_route('GET', '/api/meal-plans/{plan_id}', self.get_meal_plan)
        
        # Workouts endpoints
        safe_add_route('POST', '/api/workouts', self.save_workout_data)
        
        # Activities endpoints
        safe_add_route('POST', '/api/activities', self.save_activity_data)
        
        # Swagger documentation –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ setup_swagger_docs()
        # –£–±—Ä–∞–ª–∏ —Ä—É—á–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("üìã –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
        for route in self.app.router.routes():
            logger.info(f"   - {route}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
        self.setup_cors()
        
    def setup_cors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        cors = aiohttp_cors.setup(self.app, defaults={
            origin: aiohttp_cors.ResourceOptions(
                allow_credentials=config.CORS_ALLOW_CREDENTIALS,
                expose_headers="*",
                allow_headers=config.CORS_ALLOW_HEADERS,
                allow_methods=config.CORS_ALLOW_METHODS,
            ) for origin in config.CORS_ORIGINS
        })
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
        for route in list(self.app.router.routes()):
            cors.add(route)
    
    async def health_check(self, request: web.Request) -> web.Response:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å health check: {request.method} {request.path}")
        logger.info(f"üåê –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {dict(request.headers)}")
        logger.info(f"üîó URL –∑–∞–ø—Ä–æ—Å–∞: {request.url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è health check
        response = web.json_response({
            "status": "ok",
            "timestamp": datetime.now().isoformat(),
            "service": "AI Diet Bot API",
            "endpoint": "/health"
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        
        return response
    
    async def health_check_options(self, request: web.Request) -> web.Response:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è health check (CORS)"""
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω OPTIONS –∑–∞–ø—Ä–æ—Å health check: {request.method} {request.path}")
        
        response = web.Response(status=200)
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OPTIONS
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        response.headers['Access-Control-Max-Age'] = '3600'
        
        return response
    
    async def create_user(self, request: web.Request) -> web.Response:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['telegram_id', 'name', 'gender', 'height', 
                             'current_weight', 'target_weight', 'competition_date']
            for field in required_fields:
                if field not in data:
                    return web.json_response(
                        {"error": f"Missing required field: {field}"},
                        status=400
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.get_user(data['telegram_id'])
            if existing_user:
                return web.json_response(
                    {"error": "User already exists"},
                    status=409
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            athlete_id = db.create_user(data)
            
            if athlete_id is None:
                return web.json_response(
                    {"error": "Failed to create user"},
                    status=500
                )
            
            return web.json_response(
                {
                    "message": "User created successfully",
                    "athlete_id": int(athlete_id) if athlete_id is not None else None,
                    "telegram_id": data['telegram_id']
                },
                status=201
            )
            
        except json.JSONDecodeError:
            return web.json_response(
                {"error": "Invalid JSON"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def get_users(self, request: web.Request) -> web.Response:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            limit = int(request.query.get('limit', 10))
            offset = int(request.query.get('offset', 0))
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
            # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            users = []
            
            return web.json_response({
                "users": [self._convert_decimals_to_float(user) for user in users if user is not None],
                "total": len(users),
                "limit": limit,
                "offset": offset
            })
            
        except Exception as e:
            logger.error(f"Error getting users: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def get_user(self, request: web.Request) -> web.Response:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        try:
            telegram_id = int(request.match_info['telegram_id'])
            user = db.get_user(telegram_id)
            
            if not user:
                return web.json_response(
                    {"error": "User not found"},
                    status=404
                )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Decimal –∏ datetime –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            user_serializable = self._convert_decimals_to_float(user) if user is not None else {}
            
            return web.json_response(user_serializable)
            
        except ValueError:
            return web.json_response(
                {"error": "Invalid telegram_id format"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error getting user: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def generate_meal_plan(self, request: web.Request) -> web.Response:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {request.method} {request.path}")
        try:
            data = await request.json()
            logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
            telegram_id = data.get('telegram_id')
            athlete_id = data.get('athlete_id')
            
            if not telegram_id and not athlete_id:
                return web.json_response(
                    {"error": "telegram_id or athlete_id is required"},
                    status=400
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if athlete_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π athlete_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self._get_user_by_athlete_id(athlete_id)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                user_data = db.get_user(telegram_id)
            
            if not user_data:
                return web.json_response(
                    {"error": "User not found"},
                    status=404
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ LLM
            meal_plan = await llm.generate_meal_plan(user_data)
            
            if not meal_plan or 'error' in meal_plan:
                return web.json_response(
                    {"error": "Failed to generate meal plan"},
                    status=500
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º plan_date –∏ plan_name –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
            if 'plan_date' in data:
                meal_plan['plan_date'] = data['plan_date']
            if 'plan_name' in data:
                meal_plan['plan_name'] = data['plan_name']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É
            if not athlete_id:
                # –ï—Å–ª–∏ athlete_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ telegram_id
                athlete_id = db.get_athlete_id_by_telegram(telegram_id)
            
            plan_id = db.save_meal_plan(athlete_id, meal_plan)
            
            if plan_id is None:
                return web.json_response(
                    {"error": "Failed to save meal plan"},
                    status=500
                )
            
            return web.json_response({
                "message": "Meal plan generated successfully",
                "plan_id": int(plan_id) if plan_id is not None else None,
                "plan_data": self._convert_decimals_to_float(meal_plan)
            }, status=201)
            
        except json.JSONDecodeError:
            return web.json_response(
                {"error": "Invalid JSON"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error generating meal plan: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def get_user_plans(self, request: web.Request) -> web.Response:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_id = request.query.get('telegram_id')
            
            if not telegram_id:
                return web.json_response(
                    {"error": "telegram_id is required"},
                    status=400
                )
            
            plans = db.get_user_plans(int(telegram_id))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            serializable_plans = [self._convert_decimals_to_float(plan) for plan in plans if plan is not None]
            
            return web.json_response({
                "plans": serializable_plans,
                "total": len(plans)
            })
            
        except Exception as e:
            logger.error(f"Error getting user plans: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def get_meal_plan(self, request: web.Request) -> web.Response:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            plan_id = int(request.match_info['plan_id'])
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏–∑ –ë–î
            # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            plan = None
            
            if not plan:
                return web.json_response(
                    {"error": "Meal plan not found"},
                    status=404
                )
            
            return web.json_response(self._convert_decimals_to_float(plan) if plan is not None else {})
            
        except ValueError:
            return web.json_response(
                {"error": "Invalid plan_id format"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error getting meal plan: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def save_workout_data(self, request: web.Request) -> web.Response:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
        try:
            data = await request.json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return web.json_response(
                    {"error": "telegram_id is required"},
                    status=400
                )
            
            athlete_id = db.get_athlete_id_by_telegram(telegram_id)
            if not athlete_id:
                return web.json_response(
                    {"error": "User not found"},
                    status=404
                )
            
            workout_id = db.save_workout_info(athlete_id, data)
            
            if workout_id is None:
                return web.json_response(
                    {"error": "Failed to save workout data"},
                    status=500
                )
            
            return web.json_response({
                "message": "Workout data saved successfully",
                "workout_id": int(workout_id) if workout_id is not None else None
            }, status=201)
            
        except json.JSONDecodeError:
            return web.json_response(
                {"error": "Invalid JSON"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error saving workout data: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def save_activity_data(self, request: web.Request) -> web.Response:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            data = await request.json()
            telegram_id = data.get('telegram_id')
            
            if not telegram_id:
                return web.json_response(
                    {"error": "telegram_id is required"},
                    status=400
                )
            
            athlete_id = db.get_athlete_id_by_telegram(telegram_id)
            if not athlete_id:
                return web.json_response(
                    {"error": "User not found"},
                    status=404
                )
            
            activity_id = db.save_activity_info(athlete_id, data)
            
            if activity_id is None:
                return web.json_response(
                    {"error": "Failed to save activity data"},
                    status=500
                )
            
            return web.json_response({
                "message": "Activity data saved successfully",
                "activity_id": int(activity_id) if activity_id is not None else None
            }, status=201)
            
        except json.JSONDecodeError:
            return web.json_response(
                {"error": "Invalid JSON"},
                status=400
            )
        except Exception as e:
            logger.error(f"Error saving activity data: {e}")
            return web.json_response(
                {"error": "Internal server error"},
                status=500
            )
    
    async def setup_swagger_docs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É aiohttp-swagger
        # –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Swagger UI –≤—Ä—É—á–Ω—É—é —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Swagger UI
        async def swagger_ui_handler(request):
            return web.Response(
                text=get_swagger_ui_template(),
                content_type='text/html'
            )
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è YAML —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        async def swagger_yaml_handler(request):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π YAML —Ñ–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                with open('ai_diet_api.yaml', 'r', encoding='utf-8') as f:
                    yaml_content = f.read()
                return web.Response(
                    text=yaml_content,
                    content_type='application/yaml'
                )
            except FileNotFoundError:
                logger.error("YAML —Ñ–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return web.Response(
                    text="swagger: '2.0'\ninfo:\n  title: AI Diet Bot API\n  version: 1.0.0\n  description: YAML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    content_type='application/yaml',
                    status=404
                )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç "method GET is already registered"
        routes = [str(route) for route in self.app.router.routes()]
        
        if '/api/swagger/' not in routes:
            self.app.router.add_get('/api/swagger/', swagger_ui_handler)
            logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç /api/swagger/ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        if '/api/swagger.yaml' not in routes:
            self.app.router.add_get('/api/swagger.yaml', swagger_yaml_handler)
            logger.info("‚úÖ –ú–∞—Ä—à—Ä—É—Ç /api/swagger.yaml –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("üìö Swagger UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—Ä—É—á–Ω—É—é –ø–æ –ø—É—Ç–∏ /api/swagger/")
    
    def _get_user_by_athlete_id(self, athlete_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ athlete_id"""
        query = "SELECT * FROM athletes WHERE athlete_id = %s"
        result = db.execute_query(query, (athlete_id,))
        return result[0] if result else None

    def _convert_decimals_to_float(self, data):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Decimal, datetime –∏ date –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if data is None:
            return None
        elif isinstance(data, (Decimal, float)):
            return float(data)
        elif isinstance(data, (datetime, date)):
            return data.isoformat()
        elif isinstance(data, dict):
            return {k: self._convert_decimals_to_float(v) for k, v in data.items()}
        elif isinstance(data, list):
            return [self._convert_decimals_to_float(item) for item in data]
        else:
            return data

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.setup_swagger_docs()
        
        runner = web.AppRunner(self.app)
        await runner.setup()
        
        site = web.TCPSite(runner, self.host, self.port)
        await site.start()
        
        logger.info(f"API server started on {self.host}:{self.port}")
        logger.info(f"üåê –ë–∞–∑–æ–≤—ã–π URL API: {self.api_base_url}")
        logger.info(f"üìö Swagger docs available at {self.api_base_url}/api/swagger/")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        await asyncio.Future()

async def start_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    server = APIServer()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {server.host}:{server.port}")
    logger.info(f"üåê –ë–∞–∑–æ–≤—ã–π URL API: {server.api_base_url}")
    logger.info(f"üîß CORS origins: {config.CORS_ORIGINS}")
    await server.start()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(start_api_server())