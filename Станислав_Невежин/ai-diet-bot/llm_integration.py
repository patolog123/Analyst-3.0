"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LLM (DeepSeek) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
–°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞ 3.0
"""

import logging
import json
import aiohttp
import asyncio
from datetime import date, timedelta
from typing import Dict, List, Optional, Any
from config import config

logger = logging.getLogger(__name__)

class LLMIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API"""
    
    def __init__(self):
        self.api_key = config.DEEPSEEK_API_KEY
        self.base_url = config.DEEPSEEK_BASE_URL
        self.model = config.DEEPSEEK_MODEL
        self.temperature = config.DEEPSEEK_TEMPERATURE
        self.max_tokens = config.DEEPSEEK_MAX_TOKENS
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (—Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        self.plan_timeout = aiohttp.ClientTimeout(total=240, connect=60, sock_connect=60, sock_read=120)  # 240 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def _make_request(self, messages: List[Dict], timeout: aiohttp.ClientTimeout = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        if not self.api_key:
            logger.error("‚ùå DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEEPSEEK_API_KEY")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π URL (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not self.base_url:
            logger.error(f"‚ùå –ë–∞–∑–æ–≤—ã–π URL DeepSeek –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": self.model,
            "messages": messages,
            "temperature": self.temperature,
            "max_tokens": self.max_tokens
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π timeout –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 45 —Å–µ–∫—É–Ω–¥
        request_timeout = timeout or aiohttp.ClientTimeout(total=45, connect=15, sock_connect=15, sock_read=30)
        
        try:
            logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: {self.base_url}")
            logger.debug(f"üìù –ü—Ä–æ–º–ø—Ç: {messages[-1]['content'][:100]}...")
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=request_timeout
                ) as response:
                    
                    response_text = await response.text()
                    logger.debug(f"üì® –û—Ç–≤–µ—Ç DeepSeek: Status {response.status}, Body: {response_text[:200]}...")
                    
                    if response.status == 200:
                        data = await response.json()
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")
                        return data
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {response.status}")
                        logger.error(f"üìã –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {response_text}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                        if response.status == 401:
                            logger.error("üîë –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –∫–ª—é—á –∏—Å—Ç–µ–∫")
                        elif response.status == 429:
                            logger.error("‚è∞ –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        elif response.status == 500:
                            logger.error("‚ö° –û—à–∏–±–∫–∞ 500: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ DeepSeek")
                        elif response.status == 503:
                            logger.error("üåê –û—à–∏–±–∫–∞ 503: –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                            
                        return None
                        
        except aiohttp.ClientConnectorError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å DeepSeek: {e}")
            logger.error("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.deepseek.com")
            return None
        except aiohttp.ServerTimeoutError as e:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞ DeepSeek: {e}")
            logger.error("üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return None
        except aiohttp.ClientResponseError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: {e.status} - {e.message}")
            if e.status == 429:
                logger.error("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif e.status == 401:
                logger.error("üîë –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DEEPSEEK_API_KEY.")
            elif e.status >= 500:
                logger.error("‚ö° –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ DeepSeek. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return None
        except aiohttp.ClientError as e:
            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ DeepSeek: {e}")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.deepseek.com")
            return None
        except TimeoutError as e:
            logger.error(f"‚è∞ –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ DeepSeek: {e}")
            logger.error("üí° –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –£–≤–µ–ª–∏—á—å—Ç–µ timeout –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å.")
            return None
        except asyncio.TimeoutError as e:
            logger.error(f"‚è∞ Asyncio —Ç–∞–π–º–∞—É—Ç DeepSeek: {e}")
            logger.error("üí° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏.")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ DeepSeek: {type(e).__name__}: {e}")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞")
            return None
    
    async def generate_training_question(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)"""
        messages = [
            {
                "role": "system",
                "content": "–¢—ã - AI –¥–∏–µ—Ç–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º. "
                          "–ó–∞–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é."
            },
            {
                "role": "user",
                "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é. "
                          "–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–±—É–∂–¥–∞—Ç—å –∫ –æ—Ç–≤–µ—Ç—É."
            }
        ]
        
        response = await self._make_request(messages)
        if response and 'choices' in response and response['choices']:
            return response['choices'][0]['message']['content']
        
        # Fallback –≤–æ–ø—Ä–æ—Å
        return "üí™ –°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –¥–µ–ª–∞–µ—à—å?"
    
    async def generate_activity_question(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        messages = [
            {
                "role": "system",
                "content": "–¢—ã - AI –¥–∏–µ—Ç–æ–ª–æ–≥, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º. "
                          "–ó–∞–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
            },
            {
                "role": "user",
                "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. "
                          "–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–æ–±—É–∂–¥–∞—Ç—å –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É. "
                          "–°–ø—Ä–æ—Å–∏ –æ —à–∞–≥–∞—Ö –≤ –¥–µ–Ω—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —Ä–∞–±–æ—Ç—ã, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —á–∞—Å–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            }
        ]
        
        response = await self._make_request(messages)
        if response and 'choices' in response and response['choices']:
            return response['choices'][0]['message']['content']
        
        # Fallback –≤–æ–ø—Ä–æ—Å
        return "üö∂‚Äç‚ôÇÔ∏è –û–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n‚Ä¢ –®–∞–≥–∏ –≤ –¥–µ–Ω—å\n‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚Ä¢ –ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    
    async def generate_meal_plan(self, user_data: Dict) -> Dict:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º decimal –∑–Ω–∞—á–µ–Ω–∏—è –≤ float –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤
        processed_data = {}
        for key, value in user_data.items():
            if hasattr(value, '__float__'):
                processed_data[key] = float(value)
            else:
                processed_data[key] = value
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = self._create_meal_plan_prompt(processed_data)
        
        messages = [
            {
                "role": "system",
                "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏. "
                          "–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
        
        response = await self._make_request(messages, timeout=self.plan_timeout)
        
        if response and 'choices' in response and response['choices']:
            plan_text = response['choices'][0]['message']['content']
            return self._parse_meal_plan(plan_text, processed_data)
        
        # Fallback –ø–ª–∞–Ω
        return self._create_fallback_plan(processed_data)
    
    def _create_meal_plan_prompt(self, user_data: Dict) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        return f"""
–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏.
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞:
- –ü–æ–ª: {user_data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
- –†–æ—Å—Ç: {user_data.get('height', 0)} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: {user_data.get('current_weight', 0)} –∫–≥
- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user_data.get('target_weight', 0)} –∫–≥
- –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π: {user_data.get('competition_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£ –ü–ò–¢–ê–ù–ò–Ø:
1. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –û–î–ò–ù –¥–µ–Ω—å (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
2. –£–∫–∞–∂–∏ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ —É–∫–∞–∂–∏:
   - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥ (–Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
   - –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–∫–∫–∞–ª)
   - –ë–µ–ª–∫–∏ (–≥)
   - –ñ–∏—Ä—ã (–≥)
   - –£–≥–ª–µ–≤–æ–¥—ã (–≥)
4. –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–Ω—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
5. –ë–∞–ª–∞–Ω—Å –ë–ñ–£: –±–µ–ª–∫–∏ 30-40%, –∂–∏—Ä—ã 20-30%, —É–≥–ª–µ–≤–æ–¥—ã 30-50%
6. –£—á–∏—Ç—ã–≤–∞–π —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–æ–º
7. –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –æ—Ç–≤–µ—Ç–∞:
{{
    "total_calories": 2500,
    "total_proteins": 180.0,
    "total_fats": 70.0,
    "total_carbs": 250.0,
    "plan_date": "2025-09-02",
    "meals": [
        {{
            "meal_type": "–∑–∞–≤—Ç—Ä–∞–∫",
            "calories": 600,
            "proteins": 40.0,
            "fats": 20.0,
            "carbs": 70.0,
            "description": "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏, 2 –≤–∞—Ä–µ–Ω—ã—Ö —è–π—Ü–∞"
        }},
        {{
            "meal_type": "–æ–±–µ–¥",
            "calories": 800,
            "proteins": 60.0,
            "fats": 30.0,
            "carbs": 80.0,
            "description": "–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π, –æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç"
        }},
        {{
            "meal_type": "—É–∂–∏–Ω",
            "calories": 600,
            "proteins": 50.0,
            "fats": 20.0,
            "carbs": 60.0,
            "description": "–¢–≤–æ—Ä–æ–≥ 5% —Å –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏, –∫–µ—Ñ–∏—Ä 1%"
        }}
    ]
}}
"""
    
    def _parse_meal_plan(self, plan_text: str, user_data: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            logger.debug(f"üìù –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM: {plan_text[:500]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_str = None
            if '```json' in plan_text:
                json_str = plan_text.split('```json')[1].split('```')[0].strip()
            elif '```' in plan_text:
                json_str = plan_text.split('```')[1].split('```')[0].strip()
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
                import re
                json_match = re.search(r'\{.*\}', plan_text, re.DOTALL)
                if json_match:
                    json_str = json_match.group(0).strip()
                else:
                    json_str = plan_text
            
            logger.debug(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON: {json_str[:300]}...")
            
            plan_data = json.loads(json_str)
            logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–ª–∞–Ω: {json.dumps(plan_data, indent=2, default=str)[:200]}...")
            return plan_data
            
        except (json.JSONDecodeError, IndexError, AttributeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
            logger.error(f"üìã –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {plan_text[:200]}...")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            return self._create_fallback_plan(user_data)
    
    def _create_fallback_plan(self, user_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å fallback –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
        gender = user_data.get('gender', 'M')
        current_weight = float(user_data.get('current_weight', 70))
        target_weight = float(user_data.get('target_weight_category', 65))
        
        # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
        if gender == 'M':
            base_calories = 2500.0
        else:
            base_calories = 2000.0
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤–µ—Å–æ–≤
        weight_diff = float(current_weight - target_weight)
        if weight_diff > 0:
            base_calories -= weight_diff * 100.0  # –î–µ—Ñ–∏—Ü–∏—Ç –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞
        else:
            base_calories += abs(weight_diff) * 100.0  # –ü—Ä–æ—Ñ–∏—Ü–∏—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞
        
        return {
            "total_calories": int(base_calories),
            "total_proteins": round(float(base_calories) * 0.35 / 4, 1),
            "total_fats": round(float(base_calories) * 0.25 / 9, 1),
            "total_carbs": round(float(base_calories) * 0.4 / 4, 1),
            "plan_date": (date.today() + timedelta(days=1)).strftime('%Y-%m-%d'),
            "meals": [
                {
                    "meal_type": "–∑–∞–≤—Ç—Ä–∞–∫",
                    "calories": int(float(base_calories) * 0.3),
                    "proteins": round(float(base_calories) * 0.3 * 0.35 / 4, 1),
                    "fats": round(float(base_calories) * 0.3 * 0.25 / 9, 1),
                    "carbs": round(float(base_calories) * 0.3 * 0.4 / 4, 1),
                    "description": "–û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏, 2 –≤–∞—Ä–µ–Ω—ã—Ö —è–π—Ü–∞"
                },
                {
                    "meal_type": "–æ–±–µ–¥",
                    "calories": int(float(base_calories) * 0.4),
                    "proteins": round(float(base_calories) * 0.4 * 0.35 / 4, 1),
                    "fats": round(float(base_calories) * 0.4 * 0.25 / 9, 1),
                    "carbs": round(float(base_calories) * 0.4 * 0.4 / 4, 1),
                    "description": "–ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–æ–π, –æ–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç"
                },
                {
                    "meal_type": "—É–∂–∏–Ω",
                    "calories": int(float(base_calories) * 0.3),
                    "proteins": round(float(base_calories) * 0.3 * 0.35 / 4, 1),
                    "fats": round(float(base_calories) * 0.3 * 0.25 / 9, 1),
                    "carbs": round(float(base_calories) * 0.3 * 0.4 / 4, 1),
                    "description": "–¢–≤–æ—Ä–æ–≥ 5% —Å –≥—Ä–µ—Ü–∫–∏–º–∏ –æ—Ä–µ—Ö–∞–º–∏, –∫–µ—Ñ–∏—Ä 1%"
                }
            ]
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
llm = LLMIntegration()