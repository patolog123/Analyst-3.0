AI-диетолог 3.0

1. User story
      Как спортсмен, я хочу получить от ИИ агента ежедневный план питания, чтобы подготовиться к выступлению на соревнованиях в требуемой весовой категории.

2. Диаграммы последовательностей
      
      Описание последовательности взаимодействия спортсмена с AI диетологом 3.0
      
      1. Инициализация и главное меню
      - Пользователь открывает бота и получает сообщение с командой /start
      - Пользователь запускает бота командой /start
      - Telegram Bot отправляет команду start на сервер Telegram
      - Сервер Telegram через webhook передает запрос /start в Backend
      - Backend проверяет данные пользователя в базе данных PostgreSQL ai_diet_bot:
      таблица athletes, 
      поля telegram_id, athlete_id 
      - Если данные есть, возвращаются данные пользователя из таблиц athletes, workouts, activities, meal_plans
      - Backend отправляет главное меню с inline-кнопками
      - Пользователь получает главное меню с выбором действий: 
      "Привет! Я AI диетолог 3.0 и помогу тебе составить план питания для подготовки к соревнованиям! Выбери действие: [Составить план] [Сохраненные планы]"
      
      2. Составление нового плана - ввод параметров
      - Пользователь нажимает inline-кнопку [Составить план]
      - Если на этот день пользователем уже сгенерирован план, то он удаляется из таблицы meal_plans
      - Отправляется callback: create_plan через Telegram сервер
      - Backend получает webhook: /create_plan
      - Backend задает вопросы поочередно, один вопрос – одно сообщение
      - Пользователь отвечает поочередно, один ответ – одно сообщение
        • Имя спортсмена (формат строка, образец Станислав)
        • Дата соревнований (формат ДД.ММ.ГГГГ)
        • Пол (формат строка, образец М или Ж)
        • Рост (формат число с точкой в см, образец 167.5)
        • Текущий вес (формат число с точкой в кг, образец 65.5)
        • Целевой вес (число с точкой в кг, образец 62.5)
      - Backend валидирует ответы пользователя:
      - Если не все ответы введены - запрос недостающих данных, один ответ – одно сообщение
      - Если ответы невалидны (не соответствуют формату), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы нарушают логику (дата соревнований в прошлом, до соревнований меньше недели, разница текущего и целевого веса спортсмена больше 5%), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы валидны - сохранение в БД, таблица athletes, сообщение пользователю о блоке вопросов по режиму тренировок

     3. Этап интервью: Режим тренировок
     - Backend задает пользователю вопросы о тренировках поочередно, один вопрос – одно сообщение
      - Пользователь вводит ответы поочередно, один ответ – одно сообщение
       • Количество тренировок в неделю (формат целое число, образец 2)
      • Упражнения (формат строка, образец жим лежа)
       • Вес снарядов (формат число с точкой в кг, образец 125.5)
       • Повторы (формат целое число, образец 5)
       • Подходы (формат целое число, образец 5)
      - Backend валидирует ответы пользователя:
      - Если не все ответы введены - запрос недостающих данных, один ответ – одно сообщение
      - Если ответы невалидны (не соответствуют формату), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы нарушают логику (тренировок в неделю меньше 1 или больше 14, вес снарядов <0, повторов <0, подходов <0), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы валидны - сохранение в БД, таблица workouts, сообщение пользователю о блоке вопросов по дополнительной физической активности

    4. Этап интервью: Физическая активность
     - Backend задает пользователю вопросы о физической активности поочередно, один вопрос – одно сообщение
      - Пользователь вводит ответы поочередно, один ответ – одно сообщение
      • Шаги в день (формат целое число, образец 10000)
      • Характер работы (формат строка, образец сидячая)
      • Дополнительная активность (формат строка, образец бег)
      • Часов дополнительной активности в день (формат число с точкой в часах, образец 1.5)
      - Backend валидирует ответы пользователя:
      - Если не все ответы введены - запрос недостающих данных, один ответ – одно сообщение
      - Если ответы невалидны (не соответствуют формату), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы нарушают логику (активностей в неделю меньше 1 или больше 7, продолжительность активности <0), предлагается ввести валидные ответы повторно, один ответ – одно сообщение
      - Если ответы валидны - сохранение в БД, таблица activities, сообщение пользователю о начале генерации плана питания
    
    5. Генерация плана питания
    - Backend агрегирует данные пользователя из таблиц athletes, workouts, activities
    - Backend отправляет запрос на генерацию плана питания на день в LLM, содержащий агрегированные данные пользователя из таблиц athletes, workouts, activities
    - LLM возвращает на Backend сгенерированный план на день, содержащий:
      • Дата начала плана питания – следующий день, после запроса (формат ДД.ММ.ГГГГ)
      • Общее количество калорий (формат целое число, образец 2300);
      • Общее количество белков (формат число с точкой, образец 201.2);
      • Общее количество жиров (формат число с точкой, образец 63.9);
      • Общее количество углеводов (формат число с точкой, образец 230.2);
      • Приемы пищи (завтрак, обед, ужин), в каждом приеме пищи – наименование и единицы учета (г, мл или шт), формат строка, образец:
    Завтрак: Овсянка с ягодами (50г), омлет из 2 яиц
    Обед: Гречка (80г сухой) с куриной грудкой (150г), овощной салат (огурцы, помидоры, зелень)
    Ужин: Творог 5% (200г) с грецкими орехами (30г), кефир 1% (200мл)
    - Сгенерированный план на день сохраняется в базе данных - сохранение в БД, таблица meal_plans 

    6. Отправка результата пользователю
    - Backend отправляет сообщение пользователю с предложением просмотреть сгенерированный план или вернуться в главное меню: 
    "Супер, твой план готов! Выбери действие: [Просмотреть план] [Вернуться в главное меню]"
    - Пользователь получает уведомление о готовности плана
    - Пользователь выбирает [Просмотреть план]
    - Backend запрашивает последний сгенерированный план из БД, таблица meal_plans
    - Пользователь получает сгенерированный план питания
    - Если не удалось сгенерировать план питания пользователь получает сообщение:
    "Произошла ошибка при сохранении плана питания. Попробуй позже или обратись в поддержку."
    - Пользователь получает главное меню с выбором действий: 
    "Привет! Я AI диетолог 3.0 и помогу тебе составить план питания для подготовки к соревнованиям! Выбери действие: [Составить план] [Сохраненные планы]"

    7. Просмотр сохраненных планов
    - Пользователь нажимает "Сохраненные планы" в главном меню
    - Backend запрашивает список планов пользователя из БД, таблица meal_plans
    - Если список пустой - сообщение об отсутствии планов:
    "У тебя пока нет сохраненных планов питания. Создай первый план!", затем – открытие главного меню
    - Если список не пустой - отображается сообщение "Твои сохраненные планы питания:", затем кнопки доступных планов с датами из БД, таблица meal_plans
    - Пользователь выбирает конкретный план
    - Backend запрашивает данные выбранного плана
    - Пользователь получает сообщение - план на день, содержащий:
      • Дата начала плана питания (формат ДД.ММ.ГГГГ)
      • Общее количество калорий (формат целое число, образец 2300);
      • Общее количество белков (формат число с точкой, образец 201.2);
      • Общее количество жиров (формат число с точкой, образец 63.9);
      • Общее количество углеводов (формат число с точкой, образец 230.2)
    • Приемы пищи (завтрак, обед, ужин), в каждом приеме пищи – наименование и единицы учета (г, мл или шт), формат строка, образец:
    Завтрак: Овсянка с ягодами (50г), омлет из 2 яиц
    Обед: Гречка (80г сухой) с куриной грудкой (150г), овощной салат (огурцы, помидоры, зелень)
    Ужин: Творог 5% (200г) с грецкими орехами (30г), кефир 1% (200мл)
    с кнопками [Завершить просмотр плана] [Вернуться в главное меню]
    
  8. Завершение сессии
    - Пользователь нажимает кнопку "Завершить просмотр плана"
  - Backend очищает временные данные сессии
  - Пользователь получает финальное сообщение с пожеланием удачи на соревнованиях

              
