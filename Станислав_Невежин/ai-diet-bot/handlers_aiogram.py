"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞ AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞ —Å aiogram 3.x
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ Sequence Diagram v1.4
"""

import logging
import json
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional, Tuple
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart

from config import config
from database import db
from llm_integration import llm

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
class Form(StatesGroup):
    main_menu = State()
    collecting_name = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏
    collecting_competition_date = State()
    collecting_gender = State()
    collecting_height = State()
    collecting_current_weight = State()
    collecting_target_weight = State()
    training_sessions = State()
    training_exercises = State()
    training_weight = State()
    training_reps = State()
    training_sets = State()
    activity_steps = State()
    activity_work_type = State()
    activity_extra = State()
    activity_hours = State()
    viewing_plan = State()
    viewing_saved_plans = State()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
user_interview_data = {}

async def start_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    existing_user = db.get_user(user.id)
    
    if existing_user:
        welcome_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º?"
        )
        await message.answer(welcome_text, reply_markup=main_menu_keyboard())
        await state.set_state(Form.main_menu)
    else:
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø - AI –¥–∏–µ—Ç–æ–ª–æ–≥ 3.0, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ "
            "–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º! ü•á\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ:"
        )
        await message.answer(welcome_text)
        await message.answer("üë§ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—É–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è)")
        await state.set_state(Form.collecting_name)

async def collect_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    name = message.text.strip()
    
    if not name or len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:")
        return
    
    await state.update_data(name=name)
    await message.answer("üìÖ –ö–æ–≥–¥–∞ —É —Ç–µ–±—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(Form.collecting_competition_date)

async def collect_competition_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π"""
    user = message.from_user
    
    try:
        comp_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
        if not db.validate_competition_date(comp_date):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –î–æ –Ω–∞—á–∞–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏.\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
            )
            return
        
        await state.update_data(competition_date=comp_date)
        await message.answer("üë´ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):")
        await state.set_state(Form.collecting_gender)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")

async def collect_gender_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    gender = message.text.upper()
    
    if gender in ['–ú', 'M', '–ú–£–ñ', '–ú–£–ñ–°–ö–û–ô']:
        await state.update_data(gender='M')
        await message.answer("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(Form.collecting_height)
    elif gender in ['–ñ', 'F', '–ñ–ï–ù', '–ñ–ï–ù–°–ö–ò–ô']:
        await state.update_data(gender='F')
        await message.answer("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
        await state.set_state(Form.collecting_height)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):")

async def collect_height_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        height = float(message.text.replace(',', '.'))
        if 100 <= height <= 250:
            await state.update_data(height=height)
            await message.answer("‚öñÔ∏è –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
            await state.set_state(Form.collecting_current_weight)
        else:
            await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–≤ —Å–º):")

async def collect_current_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        current_weight = float(message.text.replace(',', '.'))
        if 30 <= current_weight <= 200:
            await state.update_data(current_weight=current_weight)
            await message.answer("üéØ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (–≤ –∫–≥)?")
            await state.set_state(Form.collecting_target_weight)
        else:
            await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 –∫–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

async def collect_target_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        target_weight = float(message.text.replace(',', '.'))
        user_data = await state.get_data()
        current_weight = user_data.get('current_weight')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –≤–µ—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
        if not db.validate_weight_difference(current_weight, target_weight):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–æ–º –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5%.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å:"
            )
            return
        
        await state.update_data(target_weight=target_weight)
        await finish_parameter_collection(message, state, message.from_user)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

async def finish_parameter_collection(message: types.Message, state: FSMContext, user: types.User) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_data['telegram_id'] = user.id
    user_data['name'] = name
    
    try:
        athlete_id = db.create_user(user_data)
        
        if athlete_id is None:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: athlete_id = None")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await state.clear()
            return
            
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å athlete_id {athlete_id}")
        
        await message.answer(
            "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö üèãÔ∏è‚Äç‚ôÇÔ∏è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üí™", callback_data="start_interview")
            ]])
        )
        
        await state.set_state(Form.main_menu)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()

async def start_interview_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await callback.message.edit_text("üí™ –û–ø–∏—à–∏ —Å–≤–æ–π —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É —Ç–µ–±—è –≤ –Ω–µ–¥–µ–ª—é (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.training_sessions)

async def training_sessions_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 14
        sessions = int(answer)
        if 1 <= sessions <= 14:
            await state.update_data(sessions_per_week=sessions)
            await message.answer("üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç—ã –¥–µ–ª–∞–µ—à—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?")
            await state.set_state(Form.training_exercises)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 14 –≤ –Ω–µ–¥–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–∏—Å–ª–æ–º:")

async def training_exercises_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    await state.update_data(exercises=answer)
    await message.answer("‚öñÔ∏è –ö–∞–∫–æ–π –≤–µ—Å —Å–Ω–∞—Ä—è–¥–æ–≤ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å (–≤ –∫–≥)?")
    await state.set_state(Form.training_weight)

async def training_weight_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –≤–µ—Å–µ —Å–Ω–∞—Ä—è–¥–æ–≤"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
        weight = float(answer.replace(',', '.'))
        if weight > 0:
            await state.update_data(equipment_weight=weight)
            await message.answer("üîÑ –°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
            await state.set_state(Form.training_reps)
        else:
            await message.answer("‚ùå –í–µ—Å —Å–Ω–∞—Ä—è–¥–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–≤ –∫–≥):")

async def training_reps_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        reps = int(answer)
        if reps > 0:
            await state.update_data(reps=reps)
            await message.answer("üîÑ –°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
            await state.set_state(Form.training_sets)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:")

async def training_sets_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–¥—Ö–æ–¥–∞—Ö"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    user_data = await state.get_data()
    athlete_id = db.get_athlete_id_by_telegram(user.id)
    
    if athlete_id:
        workout_data = {
            'sessions_per_week': user_data.get('sessions_per_week', ''),
            'exercises': user_data.get('exercises', ''),
            'equipment_weight': user_data.get('equipment_weight', ''),
            'reps': user_data.get('reps', ''),
            'sets': answer
        }
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è athlete_id {athlete_id}: {workout_data}")
        try:
            workout_id = db.save_workout_info(athlete_id, workout_data)
            if workout_id:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å workout_id {workout_id}")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (workout_id = None)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
            import traceback
            logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
    await message.answer("üö∂‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å —Ç—ã –¥–µ–ª–∞–µ—à—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.activity_steps)

async def activity_steps_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —à–∞–≥–æ–≤"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
        steps = int(answer)
        if steps >= 0:
            await state.update_data(steps_per_day=steps)
            await message.answer("üíº –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã (—Å–∏–¥—è—á–∞—è, –ø–æ–¥–≤–∏–∂–Ω–∞—è)?")
            await state.set_state(Form.activity_work_type)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º:")

async def activity_work_type_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —Ä–∞–±–æ—Ç—ã"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞–±–æ—Ç—ã
    await state.update_data(work_type=answer)
    await message.answer("üèä‚Äç‚ôÇÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–ª–∞–≤–∞–Ω–∏–µ, –±–µ–≥, –≤–µ–ª–æ—Å–∏–ø–µ–¥ (—É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç–æ–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)?")
    await state.set_state(Form.activity_extra)

async def activity_extra_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    answer = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    await state.update_data(extra_activity=answer)
    await message.answer("‚è∞ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—É–∫–∞–∂–∏ —á–∏—Å–ª–æ–º)?")
    await state.set_state(Form.activity_hours)

async def activity_hours_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ —á–∞—Å–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = message.from_user
    answer = message.text
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
        hours = float(answer.replace(',', '.'))
        if hours >= 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ v1.7
            user_data = await state.get_data()
            athlete_id = db.get_athlete_id_by_telegram(user.id)

            if athlete_id:
                activity_data = {
                    'steps_per_day': user_data.get('steps_per_day'),
                    'work_type': user_data.get('work_type'),
                    'additional_activity': user_data.get('extra_activity'),
                    'activity_hours': hours
                }
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è athlete_id {athlete_id}: {activity_data}")
                try:
                    activity_id = db.save_activity_info(athlete_id, activity_data)
                    if activity_id:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å activity_id {activity_id}")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (activity_id = None)")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                    import traceback
                    logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
            await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è üçΩÔ∏è")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                athlete_id = db.get_athlete_id_by_telegram(user.id)
                user_data = db.get_user(user.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                required_fields = ['gender', 'height', 'current_weight', 'target_weight', 'competition_date']
                missing_fields = [field for field in required_fields if not user_data.get(field)]
                
                if missing_fields:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                    await message.answer(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ LLM
                logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                meal_plan = await llm.generate_meal_plan(user_data)
                
                if not meal_plan:
                    logger.error("‚ùå LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è")
                    # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
                if 'error' in meal_plan:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {meal_plan.get('error')}")
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                    return
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –æ—Ç LLM: {json.dumps(meal_plan, indent=2, default=str)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–Ω–µ
                if 'meals' not in meal_plan or not meal_plan['meals']:
                    logger.error("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏")
                    logger.error(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞: {list(meal_plan.keys())}")
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–ª–∞–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    fallback_plan = llm._create_fallback_plan(user_data)
                    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–ª–∞–Ω")
                    meal_plan = fallback_plan
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                # –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                from datetime import datetime, timedelta
                plan_date = datetime.now().date() + timedelta(days=1)
                plan_name = f"–ü–ª–∞–Ω –Ω–∞ {plan_date.strftime('%d.%m.%Y')}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                try:
                    logger.info(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è athlete_id {athlete_id}")
                    logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞: {json.dumps(meal_plan, indent=2, default=str)}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
                    meal_plan['plan_name'] = plan_name
                    plan_id = db.save_meal_plan(athlete_id, meal_plan)
                    
                    if plan_id is not None:
                        logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å plan_id {plan_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {plan_name}")
                        
                        # –°–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        await message.answer(
                            "üéâ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")],
                                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                            ])
                        )
                        await state.set_state(Form.viewing_plan)
                        logger.info(f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (ID: {plan_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {plan_name})")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (plan_id = None)")
                        await message.answer(
                            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            reply_markup=main_menu_keyboard()
                        )
                        await state.set_state(Form.main_menu)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –≤ –±–∞–∑—É: {type(e).__name__}: {e}")
                    import traceback
                    logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=main_menu_keyboard()
                    )
                    await state.set_state(Form.main_menu)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {type(e).__name__}: {e}")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ DeepSeek –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu_keyboard()
                )
                await state.set_state(Form.main_menu)
        else:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —á–∏—Å–ª–æ–º:")

async def show_plan(message: types.Message, athlete_id: int, plan_date: date, day_number: int, plan_name: str = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Å–æ–≥–ª–∞—Å–Ω–æ v1.7"""
    meals = db.get_meals_for_plan(plan_date, athlete_id, plan_name)
    
    if not meals:
        await message.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
    day_names = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    day_name = day_names[min(day_number - 1, 6)]
    
    plan_text = f"üìã {day_name} ({plan_date.strftime('%d.%m.%Y')})"
    if plan_name != '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è':
        plan_text += f" - {plan_name}"
    plan_text += ":\n\n"
    
    total_calories = 0
    total_proteins = 0
    total_fats = 0
    total_carbs = 0
    
    for meal in meals:
        plan_text += f"üçΩ {meal['meal_type'].capitalize()}: {meal['description']}\n"
        plan_text += f"   üìä {meal['calories']} –∫–∫–∞–ª (–ë:{meal['proteins']}–≥, –ñ:{meal['fats']}–≥, –£:{meal['carbs']}–≥)\n\n"
        
        total_calories += meal['calories']
        total_proteins += meal['proteins']
        total_fats += meal['fats']
        total_carbs += meal['carbs']
    
    plan_text += f"üìà –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª "
    plan_text += f"(–ë:{total_proteins:.1f}–≥, –ñ:{total_fats:.1f}–≥, –£:{total_carbs:.1f}–≥)"
    
    await message.answer(plan_text, reply_markup=view_plan_keyboard(athlete_id, day_number))

async def create_plan_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    await callback.message.edit_text(
        "üîç –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="start_interview")
        ]])
    )

async def saved_plans_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    logger.info(f"üìã –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        plans = db.get_user_plans(user.id)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(plans)}")
        logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤: {plans}")
        
        if plans:
            buttons = []
            for plan in plans[:10]:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–∞ –¥–µ–Ω—å
                plan_date = plan['plan_date'].strftime('%d.%m.%Y')
                plan_name = plan.get('plan_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                buttons.append([InlineKeyboardButton(
                    text=f"{plan_name} ({plan['total_calories']} –∫–∫–∞–ª)",
                    callback_data=f"view_saved_plan_{plan['plan_date']}_{plan_name}"
                )])
            buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            
            await callback.message.edit_text(
                "üìÖ –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            await state.set_state(Form.viewing_saved_plans)
        else:
            logger.info("üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")
            await callback.message.edit_text(
                "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=main_menu_keyboard()
        )

async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å: {e}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ back_to_menu: {e}")
            raise

async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    try:
        await callback.answer()
        user = callback.from_user
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.clear()
        user_interview_data.pop(user.id, None)
        
        await callback.message.edit_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - –Ω–∞–ø–∏—à–∏ /start",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            logger.warning(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å: {e}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ cancel: {e}")
            raise

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    buttons = [
        [InlineKeyboardButton(text="üéØ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="create_plan")],
        [InlineKeyboardButton(text="üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã", callback_data="saved_plans")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def view_plan_keyboard(plan_id: int, day_number: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º"""
    total_days = 7
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if day_number > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"day_{plan_id}_{day_number-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"–î–µ–Ω—å {day_number}", callback_data=f"day_{plan_id}_{day_number}"))
    
    if day_number < total_days:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"day_{plan_id}_{day_number+1}"))
    
    buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"save_plan_{plan_id}"),
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞", callback_data="finish_session")
    ]
    buttons.append(action_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def view_generated_plan_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ (—Ç–æ–ª—å–∫–æ 2 –∫–Ω–æ–ø–∫–∏)"""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞", callback_data="finish_session")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è aiogram 3.x"""
    dp.message.register(start_handler, CommandStart())
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    dp.message.register(collect_name_handler, Form.collecting_name)
    dp.message.register(collect_competition_date_handler, Form.collecting_competition_date)
    dp.message.register(collect_gender_handler, Form.collecting_gender)
    dp.message.register(collect_height_handler, Form.collecting_height)
    dp.message.register(collect_current_weight_handler, Form.collecting_current_weight)
    dp.message.register(collect_target_weight_handler, Form.collecting_target_weight)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    dp.message.register(training_sessions_handler, Form.training_sessions)
    dp.message.register(training_exercises_handler, Form.training_exercises)
    dp.message.register(training_weight_handler, Form.training_weight)
    dp.message.register(training_reps_handler, Form.training_reps)
    dp.message.register(training_sets_handler, Form.training_sets)
    dp.message.register(activity_steps_handler, Form.activity_steps)
    dp.message.register(activity_work_type_handler, Form.activity_work_type)
    dp.message.register(activity_extra_handler, Form.activity_extra)
    dp.message.register(activity_hours_handler, Form.activity_hours)
    
    dp.callback_query.register(create_plan_handler, F.data == "create_plan", Form.main_menu)
    dp.callback_query.register(saved_plans_handler, F.data == "saved_plans", Form.main_menu)
    dp.callback_query.register(back_to_menu_handler, F.data == "back_to_menu")
    dp.callback_query.register(cancel_handler, F.data == "cancel")
    dp.callback_query.register(start_interview_handler, F.data == "start_interview")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø–ª–∞–Ω–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    dp.callback_query.register(lambda callback, state: handle_day_navigation(callback, state), F.data.startswith("day_"))
    dp.callback_query.register(lambda callback, state: handle_save_plan(callback, state), F.data.startswith("save_plan_"))
    dp.callback_query.register(handle_view_saved_plan, F.data.startswith("view_saved_plan_"))
    dp.callback_query.register(view_plan_handler, F.data.startswith("view_plan_"))
    dp.callback_query.register(finish_session_handler, F.data == "finish_session")

async def handle_day_navigation(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –ø–ª–∞–Ω–∞"""
    await callback.answer()
    data = callback.data.split('_')
    plan_id = int(data[1])
    day_number = int(data[2])
    
    # –ü–æ–ª—É—á–∞–µ–º athlete_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = callback.from_user
    athlete_id = db.get_athlete_id_by_telegram(user.id)
    
    if athlete_id:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        plan_info = db.execute_query(
            "SELECT plan_date, plan_name FROM meal_plans WHERE meal_id = %s LIMIT 1",
            (plan_id,)
        )
        if plan_info:
            plan_date = plan_info[0]['plan_date']
            plan_name = plan_info[0].get('plan_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            await show_plan(callback.message, athlete_id, plan_date, day_number, plan_name)
        else:
            await callback.message.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def handle_save_plan(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    await callback.answer()
    await callback.message.answer("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=main_menu_keyboard())
    await state.set_state(Form.main_menu)

async def view_plan_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    plan_id = int(callback.data.split('_')[2])  # view_plan_{plan_id}
    user = callback.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        plan_info = db.execute_query(
            "SELECT plan_date, plan_name FROM meal_plans WHERE meal_id = %s LIMIT 1",
            (plan_id,)
        )
        
        if plan_info:
            plan_date = plan_info[0]['plan_date']
            plan_name = plan_info[0].get('plan_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            athlete_id = db.get_athlete_id_by_telegram(user.id)
            
            if athlete_id:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                meals = db.get_meals_for_plan(plan_date, athlete_id, plan_name)
                
                if not meals:
                    await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                plan_text = f"üìã {plan_name}"
                plan_text += ":\n\n"
                
                total_calories = 0
                total_proteins = 0
                total_fats = 0
                total_carbs = 0
                
                for meal in meals:
                    plan_text += f"üçΩ {meal['meal_type'].capitalize()}: {meal['description']}\n"
                    plan_text += f"   üìä {meal['calories']} –∫–∫–∞–ª (–ë:{meal['proteins']}–≥, –ñ:{meal['fats']}–≥, –£:{meal['carbs']}–≥)\n\n"
                    
                    total_calories += meal['calories']
                    total_proteins += meal['proteins']
                    total_fats += meal['fats']
                    total_carbs += meal['carbs']
                
                plan_text += f"üìà –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª "
                plan_text += f"(–ë:{total_proteins:.1f}–≥, –ñ:{total_fats:.1f}–≥, –£:{total_carbs:.1f}–≥)"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–∑ 2 –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
                await callback.message.answer(plan_text, reply_markup=view_generated_plan_keyboard())
                await state.set_state(Form.viewing_plan)
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await callback.message.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback view_plan: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞")

async def handle_view_saved_plan(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    # view_saved_plan_YYYY-MM-DD_plan_name
    parts = callback.data.split('_')
    plan_date_str = parts[3]
    plan_name = '_'.join(parts[4:]) if len(parts) > 4 else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    
    user = callback.from_user
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
        plan_date = datetime.strptime(plan_date_str, '%Y-%m-%d').date()
        logger.info(f"üìÖ –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–∞ –Ω–∞ –¥–∞—Ç—É: {plan_date}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {plan_name}")
        
        athlete_id = db.get_athlete_id_by_telegram(user.id)
        logger.info(f"üë§ Athlete ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {athlete_id}")
        
        if athlete_id:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
            meals = db.get_meals_for_plan(plan_date, athlete_id, plan_name)
            logger.info(f"üçΩ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meals)}")
            logger.debug(f"üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {meals}")
            
            if not meals:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞—Ç—ã {plan_date}, –Ω–∞–∑–≤–∞–Ω–∏—è {plan_name}")
                await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
            plan_text = f"üìã {plan_name}"
            plan_text += ":\n\n"
            
            total_calories = 0
            total_proteins = 0
            total_fats = 0
            total_carbs = 0
            
            for meal in meals:
                plan_text += f"üçΩ {meal['meal_type'].capitalize()}: {meal['description']}\n"
                plan_text += f"   üìä {meal['calories']} –∫–∫–∞–ª (–ë:{meal['proteins']}–≥, –ñ:{meal['fats']}–≥, –£:{meal['carbs']}–≥)\n\n"
                
                total_calories += meal['calories']
                total_proteins += meal['proteins']
                total_fats += meal['fats']
                total_carbs += meal['carbs']
            
            plan_text += f"üìà –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª "
            plan_text += f"(–ë:{total_proteins:.1f}–≥, –ñ:{total_fats:.1f}–≥, –£:{total_carbs:.1f}–≥)"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ 2 –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
            await callback.message.answer(plan_text, reply_markup=view_generated_plan_keyboard())
            await state.set_state(Form.viewing_plan)
            logger.info(f"‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        else:
            logger.error(f"‚ùå Athlete ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–ª–∞–Ω–∞: {plan_date_str}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–ª–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def finish_session_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    user = callback.from_user
    logger.info(f"üèÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º–µ
    await state.clear()
    user_interview_data.pop(user.id, None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    await callback.message.edit_text(
        "üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞—á–∏ –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö! üèÜ\n\n"
        "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –Ω–∞–ø–∏—à–∏ /start",
        reply_markup=None
    )