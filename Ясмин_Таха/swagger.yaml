openapi: 3.0.3
info:
  title: BudgetBot API
  description: REST API for personal finance management Telegram bot
  version: 1.0.0
  contact:
    name: BudgetBot Team
    email: support@budgetbot.com

servers:
  - url: https://api.budgetbot.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      required:
        - telegram_id
        - username
        - default_currency
      properties:
        id:
          type: integer
          example: 1
        telegram_id:
          type: integer
          example: 123456789
        username:
          type: string
          example: "john_doe"
        first_name:
          type: string
          example: "John"
        default_currency:
          type: string
          example: "RUB"
        created_at:
          type: string
          format: date-time

    Category:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        name:
          type: string
          example: "food"
        type:
          type: string
          enum: [income, expense]
          example: "expense"
        created_at:
          type: string
          format: date-time

    Budget:
      type: object
      required:
        - amount
        - currency
        - period
        - start_date
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 50000.00
        currency:
          type: string
          example: "RUB"
        period:
          type: string
          enum: [daily, weekly, monthly, yearly]
          example: "monthly"
        start_date:
          type: string
          format: date
          example: "2024-01-01"
        notifications_enabled:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time

    Transaction:
      type: object
      required:
        - amount
        - currency
        - type
        - category_id
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 1500.00
        currency:
          type: string
          example: "RUB"
        type:
          type: string
          enum: [income, expense]
          example: "expense"
        category_id:
          type: integer
          example: 1
        description:
          type: string
          example: "Lunch at restaurant"
        transaction_date:
          type: string
          format: date
          example: "2024-01-15"
        created_at:
          type: string
          format: date-time

    TransactionAnalysis:
      type: object
      properties:
        amount:
          type: number
          example: 2500.00
        currency:
          type: string
          example: "RUB"
        type:
          type: string
          enum: [income, expense]
          example: "expense"
        category:
          type: string
          example: "food"
        confidence:
          type: number
          format: float
          example: 0.95
        description:
          type: string
          example: "Products at supermarket"

    ClarificationRequest:
      type: object
      required:
        - text
        - missing_fields
      properties:
        text:
          type: string
          example: "Потратил 1000"
        missing_fields:
          type: array
          items:
            type: string
          example: ["category"]

    ClarificationResponse:
      type: object
      properties:
        question:
          type: string
          example: "На что вы потратили 1000 рублей?"
        missing_fields:
          type: array
          items:
            type: string

    AnalyticsStats:
      type: object
      properties:
        total_income:
          type: number
          example: 100000.00
        total_expense:
          type: number
          example: 75000.00
        by_category:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
                example: "food"
              amount:
                type: number
                example: 25000.00
              percentage:
                type: number
                example: 33.33

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        details:
          type: object
          example: {"amount": "Must be positive number"}

paths:
  /users:
    post:
      summary: Create new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user profile
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                default_currency:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  updated:
                    type: boolean

  /categories:
    get:
      summary: Get user categories
      tags: [Categories]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create new category
      tags: [Categories]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type]
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum: [income, expense]
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '409':
          description: Category already exists

  /categories/{category_id}:
    put:
      summary: Update category
      tags: [Categories]
      security:
        - BearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  updated:
                    type: boolean

    delete:
      summary: Delete category
      tags: [Categories]
      security:
        - BearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted successfully

  /transactions:
    get:
      summary: Get user transactions
      tags: [Transactions]
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: category_id
          in: query
          schema:
            type: integer
        - name: type
          in: query
          schema:
            type: string
            enum: [income, expense]
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer

    post:
      summary: Create new transaction
      tags: [Transactions]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  balance_after:
                    type: number

  /transactions/{transaction_id}:
    get:
      summary: Get transaction by ID
      tags: [Transactions]
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

    put:
      summary: Update transaction
      tags: [Transactions]
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                description:
                  type: string
                category_id:
                  type: integer
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  updated:
                    type: boolean

    delete:
      summary: Delete transaction
      tags: [Transactions]
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Transaction deleted successfully

  /budgets:
    get:
      summary: Get user budgets
      tags: [Budgets]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Budgets retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'

    post:
      summary: Create new budget
      tags: [Budgets]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '201':
          description: Budget created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

  /budgets/{budget_id}:
    put:
      summary: Update budget
      tags: [Budgets]
      security:
        - BearerAuth: []
      parameters:
        - name: budget_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                notifications_enabled:
                  type: boolean
      responses:
        '200':
          description: Budget updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  updated:
                    type: boolean

    delete:
      summary: Delete budget
      tags: [Budgets]
      security:
        - BearerAuth: []
      parameters:
        - name: budget_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Budget deleted successfully

  /analytics/stats:
    get:
      summary: Get financial statistics
      tags: [Analytics]
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
        - name: type
          in: query
          schema:
            type: string
            enum: [income, expense]
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsStats'

  /analytics/balance:
    get:
      summary: Get current balance
      tags: [Analytics]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Balance retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                  currency:
                    type: string

  /llm/analyze-transaction:
    post:
      summary: Analyze transaction text using LLM
      tags: [LLM]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
                  example: "Купил продукты в пятерочке за 2500 рублей"
      responses:
        '200':
          description: Text analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionAnalysis'

  /llm/clarify-transaction:
    post:
      summary: Get clarification question for incomplete transaction
      tags: [LLM]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClarificationRequest'
      responses:
        '200':
          description: Clarification question generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClarificationResponse'

  /health:
    get:
      summary: Health check
      tags: [System]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time