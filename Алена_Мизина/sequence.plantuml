@startuml

title "Личный AI-ассистент"

autonumber "<b><color:DarkSlateBlue>.</color></b> " 

actor "Пользователь Telegram" as User
box "Telegram Бот (Frontend)"  #dcf2f5ff
    participant TelegramBot
end box
participant "Telegram Server" as TelegramServer
box "Backend Service"  #dcf2f5ff
    participant Backend
end box
participant "LLM Service" as LLM
box "База данных"  #dcf2f5ff
participant Database
end box

== Инициация взаимодействия ==
User -> TelegramBot : Нажимает кнопку "Старт" в интерфейсе бота\n Или пишет сообщение "/start"
activate User
activate TelegramBot
TelegramBot -> TelegramServer : Отправляет /start
activate TelegramServer
Backend -> TelegramServer : HTTP-запрос GET /getUpdates?offset=100&timeout=30
activate Backend
TelegramServer -> Backend : Ответ на /getUpdates:\n[{"update_id": 100, "message": start}]
Backend -> TelegramServer : Отправляет приветственное сообщение
deactivate Backend
TelegramServer -> TelegramBot: Доставляет сообщение пользователю
deactivate TelegramServer
TelegramBot -> User : Отображает приветственное сообщения\nс шаблоном ввода данных
deactivate User
deactivate TelegramBot

== Ввод данных пользователем ==
User -> TelegramBot : Отправляет сообщение, содержащее\nцели, приоритеты, временные ограничения
activate User
activate TelegramBot
TelegramBot -> TelegramServer : Передает данные пользователя
activate TelegramServer
Backend -> TelegramServer : HTTP-запрос GET /getUpdates?offset=101&timeout=30
activate Backend
TelegramServer -> Backend : Ответ на /getUpdates:\n[{"update_id": 101, "message": .......}]
Backend -> TelegramServer : Отправляет сообщение о необходимости ожидания
TelegramServer -> TelegramBot : Пересылает сообщение пользователю
deactivate TelegramServer
TelegramBot -> User : Отображает о необходимости ожидания

== Обработка и валидация данных ==
Backend -> Backend : Парсинг и нормализация данных пользователя
Backend -> Database : SQL-запрос: данные пользователя
activate Database
Database --> Backend : Результат запроса данных пользователя
deactivate Database
Backend -> Backend : Валидация: обязательные данные,\nограничения

alt Данные корректны
    Backend -> LLM : HTTP POST /generate-schedule\n(категории, цели, приоритеты,\nограничения, история)
    
    == Генерация расписания LLM ==
    activate LLM
    LLM -> LLM : Анализ целей и ограничений пользователя
    LLM -> LLM : Генерация оптимального расписания\nс учетом приоритетов и временных окон
    LLM -> LLM : Формирование рекомендаций\nпо улучшению планирования
    LLM --> Backend : HTTP 200: JSON с расписанием\nи рекомендациями
    deactivate LLM
    
    == Сохранение результатов ==
    Backend -> Database : SQL-запрос: Сохранение расписания и рекомендаций
    activate Database
    Backend -> Database : SQL-запрос: Обновление данных пользователя
    deactivate Database

    == Отправка результата пользователю ==
    Backend -> TelegramServer : Отправляет расписание и рекомендации
    deactivate Backend
    activate TelegramServer
    TelegramServer -> TelegramBot : Пересылает сообщение
    deactivate TelegramServer
    TelegramBot --> User : Отображает сообщение с расписанием\nи рекомендациям
    deactivate TelegramBot
    deactivate User
    
    == Ошибки ==
else Ошибка валидации - отсутствуют данные
    Backend -> TelegramServer : Отправляет запрос на получение\nнедостающих данных
    TelegramServer -> TelegramBot : Передача запроса
    TelegramBot --> User : Отображает сообщение о необходимости\nуточнения таких-то данных
    
else Ошибка валидации - превышено кол-во целей
    Backend -> TelegramServer : Отправляет сообщение, что\nпревышено максимальное количество целей
    TelegramServer -> TelegramBot : Передача сообщения об ошибке
    TelegramBot --> User : Отображает сообщение об ошибке
    
else Ошибка LLM сервиса
    LLM --> Backend : HTTP 500/503: ошибка генерации
    Backend -> TelegramServer : Отправляет сообщение об ошибке
    TelegramServer -> TelegramBot : Передача сообщения
    TelegramBot --> User : Отображает сообщение об ошибке
    
else Ошибка базы данных
    Database --> Backend : Недоступность БД
    Backend -> TelegramServer : Отправляет сообщение о\nвременной недоступности сервиса
    TelegramServer -> TelegramBot : Передача сообщения об ошибке
    TelegramBot --> User : Отображает сообщение\n"Сервис временно недоступен"
end

@enduml