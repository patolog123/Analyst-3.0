openapi: 3.0.3
info:
  title: REST API Specification
  description: |
    OpenAPI спецификация для REST API системы, включающей интеграцию с LLM (DeepSeek-V3)
    и Telegram Bot API. API предоставляет функциональность для обработки медицинских
    запросов, работы с историей пользователей и отправки сообщений.
  version: '1.0.0'
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: llm
    description: Операции с Language Learning Model (DeepSeek-V3)
  - name: telegram
    description: Операции с Telegram Bot API
  - name: users
    description: Операции с пользователями и историей

paths:
  /chat/completions:
    post:
      tags: [llm]
      summary: Запрос к LLM модели
      description: Отправка запроса к Language Learning Model (DeepSeek-V3) для генерации ответа
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            example:
              model: "DeepSeek-V3"
              messages:
                - role: "user"
                  content: "Опишите симптомы гриппа"
              temperature: 0.7
              max_tokens: 1000
              stream: false
      responses:
        '200':
          description: Успешный ответ от LLM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
              example:
                id: "chatcmpl-123"
                model: "DeepSeek-V3"
                choices:
                  - message:
                      role: "assistant"
                      content: "Грипп характеризуется следующими симптомами: высокая температура, кашель, боль в горле, насморк, головная боль, мышечные боли, усталость."
                usage:
                  prompt_tokens: 25
                  completion_tokens: 45
                  total_tokens: 70
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /getUpdates:
    get:
      tags: [telegram]
      summary: Получение новых сообщений от Telegram Bot API
      description: Запрос новых сообщений и обновлений от Telegram Bot API
      security:
        - BearerAuth: []
      parameters:
        - name: offset
          in: query
          description: Идентификатор первого обновления, которое должно быть возвращено
          schema:
            type: integer
            example: 12345
        - name: limit
          in: query
          description: Максимальное количество обновлений для возврата (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 10
        - name: timeout
          in: query
          description: Таймаут в секундах для long polling
          schema:
            type: integer
            example: 30
        - name: allowed_updates
          in: query
          description: Типы обновлений для получения
          schema:
            type: array
            items:
              type: string
            example: ["message", "callback_query"]
      responses:
        '200':
          description: Успешное получение обновлений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramUpdatesResponse'
              example:
                ok: true
                result:
                  - update_id: 123456
                    message:
                      message_id: 1001
                      from:
                        id: 123456789
                        is_bot: false
                        first_name: "Иван"
                      chat:
                        id: 123456789
                        type: "private"
                      date: 1700000000
                      text: "Привет, как дела?"
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{telegram_id}/logs:
    get:
      tags: [users]
      summary: Запрос истории по конкретному пользователю
      description: Получение истории запросов и ответов для конкретного пользователя Telegram
      security:
        - BearerAuth: []
      parameters:
        - name: telegram_id
          in: path
          required: true
          description: Уникальный идентификатор пользователя в Telegram
          schema:
            type: integer
            example: 123456789
        - name: page
          in: query
          description: Номер страницы для пагинации (начиная с 1)
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Количество записей на странице (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: from_date
          in: query
          description: Начальная дата для фильтрации (формат YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: to_date
          in: query
          description: Конечная дата для фильтрации (формат YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2024-01-31"
      responses:
        '200':
          description: Успешное получение истории пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogsResponse'
              example:
                telegram_id: 123456789
                logs:
                  - log_id: 1
                    request_id: 1001
                    answer_id: 2001
                    request_text: "Симптомы гриппа"
                    response_text: "Грипп характеризуется высокой температурой, кашлем..."
                    status: "success"
                    accuracy: 95.5
                    codes:
                      - code: "J11.1"
                        accuracy: 95.5
                    timestamp: "2024-01-15T10:30:00Z"
                    type: "diagnosis"
                pagination:
                  total_records: 150
                  current_page: 1
                  total_pages: 8
                  has_next: true
                  has_prev: false
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sendMessage:
    post:
      tags: [telegram]
      summary: Отправка сообщения через Telegram Bot API
      description: Отправка сообщения пользователю через Telegram Bot API
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            example:
              chat_id: 123456789
              text: "Ваш запрос обработан успешно!"
              parse_mode: "Markdown"
              disable_web_page_preview: true
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
              example:
                ok: true
                result:
                  message_id: 1001
                  from:
                    id: 123456789
                    is_bot: true
                    first_name: "MedicalBot"
                  chat:
                    id: 123456789
                    type: "private"
                  date: 1700000000
                  text: "Ваш запрос обработан успешно!"
        '400':
          description: Неверный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Токен авторизации для доступа к API

  schemas:
    ChatCompletionRequest:
      type: object
      required: [model, messages]
      properties:
        model:
          type: string
          description: Идентификатор модели LLM
          example: "DeepSeek-V3"
        messages:
          type: array
          description: Массив сообщений, представляющих историю диалога
          items:
            $ref: '#/components/schemas/Message'
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 2.0
          description: Параметр, контролирующий случайность ответов
          example: 0.7
        max_tokens:
          type: integer
          description: Максимальное количество токенов для генерации в ответе
          example: 1000
        stream:
          type: boolean
          description: Указание, будет ли ответ приходить частями (потоково)
          example: false

    Message:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          enum: [user, assistant, system]
          description: Роль отправителя сообщения
          example: "user"
        content:
          type: string
          description: Текст сообщения или промт для генерации
          example: "Опишите симптомы гриппа"

    ChatCompletionResponse:
      type: object
      required: [id, model, choices]
      properties:
        id:
          type: string
          description: Уникальный идентификатор ответа от API
          example: "chatcmpl-123"
        model:
          type: string
          description: Идентификатор модели, сгенерировавшей ответ
          example: "DeepSeek-V3"
        choices:
          type: array
          description: Массив с результатами генерации
          items:
            $ref: '#/components/schemas/Choice'
        usage:
          $ref: '#/components/schemas/Usage'

    Choice:
      type: object
      required: [message]
      properties:
        message:
          $ref: '#/components/schemas/ResponseMessage'
        finish_reason:
          type: string
          enum: [stop, length, content_filter]
          description: Причина завершения генерации
          example: "stop"

    ResponseMessage:
      type: object
      required: [role, content]
      properties:
        role:
          type: string
          description: Роль создателя сообщения. Всегда "assistant" для сгенерированного ответа
          example: "assistant"
        content:
          type: string
          description: Основной результат запроса — сгенерированный LLM ответ
          example: "Грипп характеризуется следующими симптомами..."

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Количество токенов в промте
          example: 25
        completion_tokens:
          type: integer
          description: Количество токенов в ответе
          example: 45
        total_tokens:
          type: integer
          description: Общее количество токенов
          example: 70

    TelegramUpdatesResponse:
      type: object
      required: [ok, result]
      properties:
        ok:
          type: boolean
          description: Статус выполнения запроса
          example: true
        result:
          type: array
          description: Массив объектов Update
          items:
            $ref: '#/components/schemas/Update'

    Update:
      type: object
      required: [update_id]
      properties:
        update_id:
          type: integer
          description: Уникальный идентификатор обновления
          example: 123456
        message:
          $ref: '#/components/schemas/TelegramMessage'

    TelegramMessage:
      type: object
      required: [message_id, from, chat, date]
      properties:
        message_id:
          type: integer
          description: Уникальный идентификатор сообщения
          example: 1001
        from:
          $ref: '#/components/schemas/User'
        chat:
          $ref: '#/components/schemas/Chat'
        date:
          type: integer
          description: Дата отправки сообщения (Unix timestamp)
          example: 1700000000
        text:
          type: string
          description: Текст сообщения
          example: "Привет, как дела?"

    User:
      type: object
      required: [id, is_bot, first_name]
      properties:
        id:
          type: integer
          description: Уникальный идентификатор пользователя
          example: 123456789
        is_bot:
          type: boolean
          description: Является ли отправитель ботом
          example: false
        first_name:
          type: string
          description: Имя пользователя
          example: "Иван"

    Chat:
      type: object
      required: [id, type]
      properties:
        id:
          type: integer
          description: Уникальный идентификатор чата
          example: 123456789
        type:
          type: string
          enum: [private, group, supergroup, channel]
          description: Тип чата
          example: "private"

    UserLogsResponse:
      type: object
      required: [telegram_id, logs, pagination]
      properties:
        telegram_id:
          type: integer
          description: Уникальный идентификатор пользователя в Telegram
          example: 123456789
        logs:
          type: array
          description: Массив объектов истории пользователя
          items:
            $ref: '#/components/schemas/LogEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'

    LogEntry:
      type: object
      required: [log_id, request_id, answer_id, request_text, response_text, status, timestamp, type]
      properties:
        log_id:
          type: integer
          description: Уникальный идентификатор записи в истории
          example: 1
        request_id:
          type: integer
          description: Уникальный идентификатор запроса пользователя
          example: 1001
        answer_id:
          type: integer
          description: Уникальный идентификатор ответа пользователю
          example: 2001
        request_text:
          type: string
          description: Текст исходного запроса пользователя
          example: "Симптомы гриппа"
        response_text:
          type: string
          description: Текст ответа системы
          example: "Грипп характеризуется высокой температурой, кашлем..."
        status:
          type: string
          enum: [success, partial, error]
          description: Статус обработки запроса
          example: "success"
        accuracy:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Точность определения кода МКБ-10 (0-100)
          example: 95.5
        codes:
          type: array
          description: Массив найденных кодов МКБ-10 с точностью
          items:
            $ref: '#/components/schemas/MedicalCode'
        timestamp:
          type: string
          format: date-time
          description: Временная метка создания записи (ISO 8601 format)
          example: "2024-01-15T10:30:00Z"
        type:
          type: string
          enum: [diagnosis, procedure, symptom]
          description: Тип медицинской информации
          example: "diagnosis"

    MedicalCode:
      type: object
      required: [code, accuracy]
      properties:
        code:
          type: string
          description: Код МКБ-10
          example: "J11.1"
        accuracy:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Точность соответствия кода (0-100)
          example: 95.5

    Pagination:
      type: object
      required: [total_records, current_page, total_pages, has_next, has_prev]
      properties:
        total_records:
          type: integer
          description: Общее количество записей
          example: 150
        current_page:
          type: integer
          description: Текущая страница
          example: 1
        total_pages:
          type: integer
          description: Общее количество страниц
          example: 8
        has_next:
          type: boolean
          description: Есть ли следующая страница
          example: true
        has_prev:
          type: boolean
          description: Есть ли предыдущая страница
          example: false

    SendMessageRequest:
      type: object
      required: [chat_id, text]
      properties:
        chat_id:
          type: integer
          description: Уникальный идентификатор чата
          example: 123456789
        text:
          type: string
          description: Текст сообщения для отправки
          example: "Ваш запрос обработан успешно!"
        parse_mode:
          type: string
          enum: [Markdown, HTML, MarkdownV2]
          description: Режим парсинга текста
          example: "Markdown"
        reply_markup:
          type: object
          description: Объект для кнопок
        disable_web_page_preview:
          type: boolean
          description: Отключить предпросмотр веб-страниц
          example: true

    SendMessageResponse:
      type: object
      required: [ok, result]
      properties:
        ok:
          type: boolean
          description: Статус выполнения запроса
          example: true
        result:
          $ref: '#/components/schemas/TelegramMessage'

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: integer
          description: Код ошибки
          example: 400
        message:
          type: string
          description: Описание ошибки
          example: "Неверный запрос"
        details:
          type: object
          description: Дополнительные детали ошибки
          additionalProperties: true